syntax = "proto3";

package ocurity.dracon.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/ocurity/dracon/api/proto/v1";

/* Confidence represents the tool's confidence that an issue exists */
enum Confidence {
  // Represents an empty confidence field from a tool
  CONFIDENCE_UNSPECIFIED = 0;
  // Represents Confidence "Informational" or generic Warnings
  CONFIDENCE_INFO = 1;
  // Represents Confidence "Low"
  CONFIDENCE_LOW = 2;
  // Represents Confidence "Medium"
  CONFIDENCE_MEDIUM = 3;
  // Represents Confidence "High"
  CONFIDENCE_HIGH = 4;
  // Highest Confidence applicable
  CONFIDENCE_CRITICAL = 5;
}

/* Severity represents the reported issue severity */
enum Severity {
  // Reserved in case a tool does not report severity
  SEVERITY_UNSPECIFIED = 0;
  // Informational priority findings
  SEVERITY_INFO = 1;
  // Low priority findings
  SEVERITY_LOW = 2;
  // Medium priority findings
  SEVERITY_MEDIUM = 3;
  // High priority findings
  SEVERITY_HIGH = 4;
  // Critical priority findings
  SEVERITY_CRITICAL = 5;
}

/* Issue represents a vulnerability to be processed by consumers */
message Issue {
  // Scan target can be host:port, //vault/foo/bar:34-67 or some URL that is semantically a target
  string target = 1;
  // The finding ID from the tool if applicable, otherwise a vulnerability ID such as CWE-ID, etc for XSS, CSRF, etc.
  string type = 2;
  // The finding title from the tool
  string title = 3;
  // A severity indication, defaults to unspecified
  Severity severity = 4;
  // An optional cvss if the tool reports it
  double cvss = 5;
  // Confidence indication, defaults to Unspecified
  Confidence confidence = 6;
  // human readable description of the issue
  string description = 7;
  // Source of the scan e.g. https://github.com/ocurity/dracon.git?ref=<revision>, github.com:tektoncd/pipeline.git?ref=<revision>, local?ref=local
  string source = 8;
  // [Optional] the CVE causing this vulnerability
  string cve = 9;
  // internal field reserved for the enrichment aggregator
  string uuid = 10;
  // optional field that allows us to also encode a bill of materials in an issue
  optional string cyclone_d_x_s_b_o_m = 11;

  // optional string that allows producers to communicate relevant code/request segments
  optional string context_segment = 12;

  // optionally the related CWEs
  repeated int32 cwe = 13;
}

/* Represents an issue that has been enriched with metadata from the enrichment service */
message EnrichedIssue {
  // the original finding
  Issue raw_issue = 1;
  // The first time this issue was seen by the enrichment service
  google.protobuf.Timestamp first_seen = 2;
  // The number of times this issue was seen
  uint64 count = 3;
  // Whether this issue has been previously marked as a false positive
  bool false_positive = 4;
  // The last time this issue was updated
  google.protobuf.Timestamp updated_at = 5;
  // hash
  string hash = 6;
  // an arbitrary list of extra annotations, reserved for use by the enrichers
  map<string, string> annotations = 7;
}
