// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package components

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

const (
	// Unknown is a ComponentType of type unknown.
	Unknown ComponentType = "unknown"
	// Base is a ComponentType of type base.
	Base ComponentType = "base"
	// Source is a ComponentType of type source.
	Source ComponentType = "source"
	// Producer is a ComponentType of type producer.
	Producer ComponentType = "producer"
	// ProducerAggregator is a ComponentType of type producer-aggregator.
	ProducerAggregator ComponentType = "producer-aggregator"
	// Enricher is a ComponentType of type enricher.
	Enricher ComponentType = "enricher"
	// EnricherAggregator is a ComponentType of type enricher-aggregator.
	EnricherAggregator ComponentType = "enricher-aggregator"
	// Consumer is a ComponentType of type consumer.
	Consumer ComponentType = "consumer"
)

var ErrInvalidComponentType = fmt.Errorf("not a valid ComponentType, try [%s]", strings.Join(_ComponentTypeNames, ", "))

var _ComponentTypeNames = []string{
	string(Unknown),
	string(Base),
	string(Source),
	string(Producer),
	string(ProducerAggregator),
	string(Enricher),
	string(EnricherAggregator),
	string(Consumer),
}

// ComponentTypeNames returns a list of possible string values of ComponentType.
func ComponentTypeNames() []string {
	tmp := make([]string, len(_ComponentTypeNames))
	copy(tmp, _ComponentTypeNames)
	return tmp
}

// ComponentTypeValues returns a list of the values for ComponentType
func ComponentTypeValues() []ComponentType {
	return []ComponentType{
		Unknown,
		Base,
		Source,
		Producer,
		ProducerAggregator,
		Enricher,
		EnricherAggregator,
		Consumer,
	}
}

// String implements the Stringer interface.
func (x ComponentType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ComponentType) IsValid() bool {
	_, err := ParseComponentType(string(x))
	return err == nil
}

var _ComponentTypeValue = map[string]ComponentType{
	"unknown":             Unknown,
	"base":                Base,
	"source":              Source,
	"producer":            Producer,
	"producer-aggregator": ProducerAggregator,
	"enricher":            Enricher,
	"enricher-aggregator": EnricherAggregator,
	"consumer":            Consumer,
}

// ParseComponentType attempts to convert a string to a ComponentType.
func ParseComponentType(name string) (ComponentType, error) {
	if x, ok := _ComponentTypeValue[name]; ok {
		return x, nil
	}
	return ComponentType(""), fmt.Errorf("%s is %w", name, ErrInvalidComponentType)
}

// MustParseComponentType converts a string to a ComponentType, and panics if is not valid.
func MustParseComponentType(name string) ComponentType {
	val, err := ParseComponentType(name)
	if err != nil {
		panic(err)
	}
	return val
}

// MarshalText implements the text marshaller method.
func (x ComponentType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ComponentType) UnmarshalText(text []byte) error {
	tmp, err := ParseComponentType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errComponentTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *ComponentType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = ComponentType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseComponentType(v)
	case []byte:
		*x, err = ParseComponentType(string(v))
	case ComponentType:
		*x = v
	case *ComponentType:
		if v == nil {
			return errComponentTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errComponentTypeNilPtr
		}
		*x, err = ParseComponentType(*v)
	default:
		return errors.New("invalid type for ComponentType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x ComponentType) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullComponentType struct {
	ComponentType ComponentType
	Valid         bool
	Set           bool
}

func NewNullComponentType(val interface{}) (x NullComponentType) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullComponentType) Scan(value interface{}) (err error) {
	if value == nil {
		x.ComponentType, x.Valid = ComponentType(""), false
		return
	}

	err = x.ComponentType.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullComponentType) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.ComponentType.String(), nil
}

// MarshalJSON correctly serializes a NullComponentType to JSON.
func (n NullComponentType) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.ComponentType)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullComponentType from JSON.
func (n *NullComponentType) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
