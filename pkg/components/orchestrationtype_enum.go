// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package components

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
)

const (
	// OrchestrationTypeUnknown is a OrchestrationType of type unknown.
	OrchestrationTypeUnknown OrchestrationType = "unknown"
	// OrchestrationTypeNaive is a OrchestrationType of type naive.
	OrchestrationTypeNaive OrchestrationType = "naive"
	// OrchestrationTypeExternalHelm is a OrchestrationType of type external-helm.
	OrchestrationTypeExternalHelm OrchestrationType = "external-helm"
)

var ErrInvalidOrchestrationType = fmt.Errorf("not a valid OrchestrationType, try [%s]", strings.Join(_OrchestrationTypeNames, ", "))

var _OrchestrationTypeNames = []string{
	string(OrchestrationTypeUnknown),
	string(OrchestrationTypeNaive),
	string(OrchestrationTypeExternalHelm),
}

// OrchestrationTypeNames returns a list of possible string values of OrchestrationType.
func OrchestrationTypeNames() []string {
	tmp := make([]string, len(_OrchestrationTypeNames))
	copy(tmp, _OrchestrationTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x OrchestrationType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OrchestrationType) IsValid() bool {
	_, err := ParseOrchestrationType(string(x))
	return err == nil
}

var _OrchestrationTypeValue = map[string]OrchestrationType{
	"unknown":       OrchestrationTypeUnknown,
	"naive":         OrchestrationTypeNaive,
	"external-helm": OrchestrationTypeExternalHelm,
}

// ParseOrchestrationType attempts to convert a string to a OrchestrationType.
func ParseOrchestrationType(name string) (OrchestrationType, error) {
	if x, ok := _OrchestrationTypeValue[name]; ok {
		return x, nil
	}
	return OrchestrationType(""), fmt.Errorf("%s is %w", name, ErrInvalidOrchestrationType)
}

// MustParseOrchestrationType converts a string to a OrchestrationType, and panics if is not valid.
func MustParseOrchestrationType(name string) OrchestrationType {
	val, err := ParseOrchestrationType(name)
	if err != nil {
		panic(err)
	}
	return val
}

func (x OrchestrationType) Ptr() *OrchestrationType {
	return &x
}

// MarshalText implements the text marshaller method.
func (x OrchestrationType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OrchestrationType) UnmarshalText(text []byte) error {
	tmp, err := ParseOrchestrationType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errOrchestrationTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *OrchestrationType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = OrchestrationType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseOrchestrationType(v)
	case []byte:
		*x, err = ParseOrchestrationType(string(v))
	case OrchestrationType:
		*x = v
	case *OrchestrationType:
		if v == nil {
			return errOrchestrationTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errOrchestrationTypeNilPtr
		}
		*x, err = ParseOrchestrationType(*v)
	default:
		return errors.New("invalid type for OrchestrationType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x OrchestrationType) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullOrchestrationType struct {
	OrchestrationType OrchestrationType
	Valid             bool
	Set               bool
}

func NewNullOrchestrationType(val interface{}) (x NullOrchestrationType) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullOrchestrationType) Scan(value interface{}) (err error) {
	if value == nil {
		x.OrchestrationType, x.Valid = OrchestrationType(""), false
		return
	}

	err = x.OrchestrationType.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullOrchestrationType) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.OrchestrationType.String(), nil
}

// MarshalJSON correctly serializes a NullOrchestrationType to JSON.
func (n NullOrchestrationType) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.OrchestrationType)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullOrchestrationType from JSON.
func (n *NullOrchestrationType) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}
