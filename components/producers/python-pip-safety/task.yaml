---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: producer-python-pip-safety
  labels:
    v1.dracon.ocurity.com/component: producer
    v1.dracon.ocurity.com/test-type: sca
spec:
  params:
  - name: producer-python-pip-safety-input-dependency-file
    type: string
    default: ""
  volumes:
  - name: scratch
    emptyDir: {}
  workspaces:
    - name: output
      description: The workspace containing the source-code to scan.
  steps:
  - name: run-pip-safety
    imagePullPolicy: IfNotPresent
    image: 'python:3.10-slim'
    script: |
      pip3 install safety
      set -x
      cd $(workspaces.output.path)
      touch "uber-reqs.txt"
      for file in $(find . -iname "requirements.txt"); do
        cat $file >> "uber-reqs.txt"
      done

      sort "uber-reqs.txt" | uniq -u > unique_requirements.txt

      safety check -r unique_requirements.txt --save-json /scratch/out.json || true
    volumeMounts:
    - mountPath: /scratch
      name: scratch
  - name: produce-issues
    imagePullPolicy: IfNotPresent
    image: '{{ default "ghcr.io/ocurity/dracon" .Values.image.registry }}/components/producers/python-pip-safety:{{ .Chart.AppVersion }}'
    command: ["/app/components/producers/python-pip-safety/python-pip-safety-parser"]
    args:
    - "-in=/scratch/out.json"
    - "-out=$(workspaces.output.path)/.dracon/producers/python-pip-safety.pb"
    volumeMounts:
    - mountPath: /scratch
      name: scratch
