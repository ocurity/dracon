{
  "errors": [
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line good/templates/mfa.disable.html:1:\n `{% include \"head.html\" %}\n{% include \"navbar.html\" %}` was unexpected",
      "path": "good/templates/mfa.disable.html",
      "spans": [
        {
          "end": { "col": 28, "line": 2, "offset": 53 },
          "file": "good/templates/mfa.disable.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 9, "offset": 27 },
          "file": "good/templates/mfa.disable.html",
          "start": { "col": 1, "line": 9, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 28, "line": 2, "offset": 53 },
            "path": "good/templates/mfa.disable.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 9, "offset": 27 },
            "path": "good/templates/mfa.disable.html",
            "start": { "col": 1, "line": 9, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line bad/templates/head.html:2:\n `<html>\n<title>Bad Vulpy - Web Application Security Lab</title>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"/static/w3.css\">\n<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Open+Sans'>\n<link rel=\"stylesheet\" href=\"/static/font-awesome.min.css\">\n<style>\nhtml,body,h1,h2,h3,h4,h5 {font-family: \"Open Sans\", sans-serif}\n\nhtml { \n    height:100%;\n}\n\nbody {\nmin-height:100%;\nbackground-image: url(\"/static/background.png\");\nbackground-position: right bottom;\nbackground-repeat: no-repeat;\n}\n\n</style>\n<body class=\"w3-white\">\n{% if session.username %}\n  <span style=\"float: right; margin-top: 10px; margin-right: 10px\"><a href=\"/login\">Logout</a></span>\n{% endif %}\n\n{% include \"messages.html\" %}` was unexpected",
      "path": "bad/templates/head.html",
      "spans": [
        {
          "end": { "col": 30, "line": 29, "offset": 787 },
          "file": "bad/templates/head.html",
          "start": { "col": 1, "line": 2, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 30, "line": 29, "offset": 787 },
            "path": "bad/templates/head.html",
            "start": { "col": 1, "line": 2, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line good/templates/head.html:2:\n `<html>\n<title>Good Vulpy - Web Application Security Lab</title>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"/static/w3.css\">\n<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Open+Sans'>\n<link rel=\"stylesheet\" href=\"/static/font-awesome.min.css\">\n<style>\nhtml,body,h1,h2,h3,h4,h5 {font-family: \"Open Sans\", sans-serif}\n\nhtml { \n    height:100%;\n}\n\nbody {\nmin-height:100%;\nbackground-image: url(\"/static/background.png\");\nbackground-position: right bottom;\nbackground-repeat: no-repeat;\n}\n\n</style>\n<body class=\"w3-white\">\n{% if session.username %}\n  <span style=\"float: right; margin-top: 10px; margin-right: 10px\"><a href=\"/login\">Logout</a></span>\n{% endif %}\n\n{% include \"messages.html\" %}` was unexpected",
      "path": "good/templates/head.html",
      "spans": [
        {
          "end": { "col": 30, "line": 29, "offset": 788 },
          "file": "good/templates/head.html",
          "start": { "col": 1, "line": 2, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 30, "line": 29, "offset": 788 },
            "path": "good/templates/head.html",
            "start": { "col": 1, "line": 2, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line bad/templates/mfa.disable.html:1:\n `{% include \"head.html\" %}\n{% include \"navbar.html\" %}` was unexpected",
      "path": "bad/templates/mfa.disable.html",
      "spans": [
        {
          "end": { "col": 28, "line": 2, "offset": 53 },
          "file": "bad/templates/mfa.disable.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 9, "offset": 27 },
          "file": "bad/templates/mfa.disable.html",
          "start": { "col": 1, "line": 9, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 28, "line": 2, "offset": 53 },
            "path": "bad/templates/mfa.disable.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 9, "offset": 27 },
            "path": "bad/templates/mfa.disable.html",
            "start": { "col": 1, "line": 9, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line bad/templates/user.create.html:1:\n `{% include \"head.html\" %}` was unexpected",
      "path": "bad/templates/user.create.html",
      "spans": [
        {
          "end": { "col": 26, "line": 1, "offset": 25 },
          "file": "bad/templates/user.create.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 27, "offset": 41 },
          "file": "bad/templates/user.create.html",
          "start": { "col": 1, "line": 25, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 26, "line": 1, "offset": 25 },
            "path": "bad/templates/user.create.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 27, "offset": 41 },
            "path": "bad/templates/user.create.html",
            "start": { "col": 1, "line": 25, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line bad/templates/posts.view.html:1:\n `{% include \"head.html\" %}\n{% include \"navbar.html\" %}` was unexpected",
      "path": "bad/templates/posts.view.html",
      "spans": [
        {
          "end": { "col": 28, "line": 2, "offset": 53 },
          "file": "bad/templates/posts.view.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 41, "offset": 27 },
          "file": "bad/templates/posts.view.html",
          "start": { "col": 1, "line": 41, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 28, "line": 2, "offset": 53 },
            "path": "bad/templates/posts.view.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 41, "offset": 27 },
            "path": "bad/templates/posts.view.html",
            "start": { "col": 1, "line": 41, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line good/templates/posts.view.html:1:\n `{% include \"head.html\" %}\n{% include \"navbar.html\" %}` was unexpected",
      "path": "good/templates/posts.view.html",
      "spans": [
        {
          "end": { "col": 28, "line": 2, "offset": 53 },
          "file": "good/templates/posts.view.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 41, "offset": 27 },
          "file": "good/templates/posts.view.html",
          "start": { "col": 1, "line": 41, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 28, "line": 2, "offset": 53 },
            "path": "good/templates/posts.view.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 41, "offset": 27 },
            "path": "good/templates/posts.view.html",
            "start": { "col": 1, "line": 41, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line good/templates/user.login.html:1:\n `{% include \"head.html\" %}` was unexpected",
      "path": "good/templates/user.login.html",
      "spans": [
        {
          "end": { "col": 26, "line": 1, "offset": 25 },
          "file": "good/templates/user.login.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 25, "offset": 41 },
          "file": "good/templates/user.login.html",
          "start": { "col": 1, "line": 23, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 26, "line": 1, "offset": 25 },
            "path": "good/templates/user.login.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 25, "offset": 41 },
            "path": "good/templates/user.login.html",
            "start": { "col": 1, "line": 23, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line bad/templates/user.login.html:1:\n `{% include \"head.html\" %}` was unexpected",
      "path": "bad/templates/user.login.html",
      "spans": [
        {
          "end": { "col": 26, "line": 1, "offset": 25 },
          "file": "bad/templates/user.login.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 25, "offset": 41 },
          "file": "bad/templates/user.login.html",
          "start": { "col": 1, "line": 23, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 26, "line": 1, "offset": 25 },
            "path": "bad/templates/user.login.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 25, "offset": 41 },
            "path": "bad/templates/user.login.html",
            "start": { "col": 1, "line": 23, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line good/templates/user.create.html:1:\n `{% include \"head.html\" %}` was unexpected",
      "path": "good/templates/user.create.html",
      "spans": [
        {
          "end": { "col": 26, "line": 1, "offset": 25 },
          "file": "good/templates/user.create.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 27, "offset": 41 },
          "file": "good/templates/user.create.html",
          "start": { "col": 1, "line": 25, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 26, "line": 1, "offset": 25 },
            "path": "good/templates/user.create.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 27, "offset": 41 },
            "path": "good/templates/user.create.html",
            "start": { "col": 1, "line": 25, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line bad/templates/user.login.mfa.html:1:\n `{% include \"head.html\" %}` was unexpected",
      "path": "bad/templates/user.login.mfa.html",
      "spans": [
        {
          "end": { "col": 26, "line": 1, "offset": 25 },
          "file": "bad/templates/user.login.mfa.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 27, "offset": 41 },
          "file": "bad/templates/user.login.mfa.html",
          "start": { "col": 1, "line": 25, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 26, "line": 1, "offset": 25 },
            "path": "bad/templates/user.login.mfa.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 27, "offset": 41 },
            "path": "bad/templates/user.login.mfa.html",
            "start": { "col": 1, "line": 25, "offset": 0 }
          }
        ]
      ]
    },
    {
      "code": 3,
      "level": "warn",
      "message": "Syntax error at line good/templates/user.login.mfa.html:1:\n `{% include \"head.html\" %}` was unexpected",
      "path": "good/templates/user.login.mfa.html",
      "spans": [
        {
          "end": { "col": 26, "line": 1, "offset": 25 },
          "file": "good/templates/user.login.mfa.html",
          "start": { "col": 1, "line": 1, "offset": 0 }
        },
        {
          "end": { "col": 28, "line": 27, "offset": 41 },
          "file": "good/templates/user.login.mfa.html",
          "start": { "col": 1, "line": 25, "offset": 0 }
        }
      ],
      "type": [
        "PartialParsing",
        [
          {
            "end": { "col": 26, "line": 1, "offset": 25 },
            "path": "good/templates/user.login.mfa.html",
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          {
            "end": { "col": 28, "line": 27, "offset": 41 },
            "path": "good/templates/user.login.mfa.html",
            "start": { "col": 1, "line": 25, "offset": 0 }
          }
        ]
      ]
    }
  ],
  "interfile_languages_used": [],
  "paths": {
    "scanned": [
      ".gitignore",
      "LICENSE",
      "README.rst",
      "bad/.gitignore",
      "bad/api_list.py",
      "bad/api_post.py",
      "bad/brute.py",
      "bad/csp.txt",
      "bad/db.py",
      "bad/db_init.py",
      "bad/libapi.py",
      "bad/libmfa.py",
      "bad/libposts.py",
      "bad/libsession.py",
      "bad/libuser.py",
      "bad/mod_api.py",
      "bad/mod_csp.py",
      "bad/mod_hello.py",
      "bad/mod_mfa.py",
      "bad/mod_posts.py",
      "bad/mod_user.py",
      "bad/payloads/cookie.js",
      "bad/payloads/hello.html",
      "bad/payloads/keylogger.js",
      "bad/static/background.png",
      "bad/static/background.xcf",
      "bad/static/font-awesome.min.css",
      "bad/static/w3.css",
      "bad/templates/csp.html",
      "bad/templates/footer.html",
      "bad/templates/head.html",
      "bad/templates/messages.html",
      "bad/templates/mfa.disable.html",
      "bad/templates/mfa.enable.html",
      "bad/templates/navbar.html",
      "bad/templates/posts.view.html",
      "bad/templates/user.chpasswd.html",
      "bad/templates/user.create.html",
      "bad/templates/user.login.html",
      "bad/templates/user.login.mfa.html",
      "bad/templates/welcome.html",
      "bad/vulpy-ssl.py",
      "bad/vulpy.py",
      "good/.gitignore",
      "good/bad-passwords.txt",
      "good/csp.txt",
      "good/cutpasswd.py",
      "good/db_init.py",
      "good/httpbrute.py",
      "good/leaked_passwords.txt",
      "good/libapi.py",
      "good/libmfa.py",
      "good/libposts.py",
      "good/libsession.py",
      "good/libuser.py",
      "good/mod_api.py",
      "good/mod_csp.py",
      "good/mod_hello.py",
      "good/mod_mfa.py",
      "good/mod_posts.py",
      "good/mod_user.py",
      "good/mod_welcome1.py",
      "good/payloads/cookie.js",
      "good/payloads/hello.html",
      "good/payloads/keylogger.js",
      "good/static/background.png",
      "good/static/background.xcf",
      "good/static/font-awesome.min.css",
      "good/static/w3.css",
      "good/templates/csp.html",
      "good/templates/footer.html",
      "good/templates/head.html",
      "good/templates/messages.html",
      "good/templates/mfa.disable.html",
      "good/templates/mfa.enable.html",
      "good/templates/navbar.html",
      "good/templates/posts.view.html",
      "good/templates/user.chpasswd.html",
      "good/templates/user.create.html",
      "good/templates/user.login.html",
      "good/templates/user.login.mfa.html",
      "good/templates/welcome.html",
      "good/vulpy-ssl.py",
      "good/vulpy.py",
      "install-on-kali.sh",
      "owasp-asvs-4.0.csv",
      "requirements.txt",
      "rules.yaml",
      "utils/aes-decrypt.py",
      "utils/aes-encrypt.py",
      "utils/ca-create.py",
      "utils/ca-csr-create.py",
      "utils/ca-csr-load.py",
      "utils/crack-cvv.py",
      "utils/crack-hash.py",
      "utils/fernet-generate-key.py",
      "utils/generate_bad_passwords.py",
      "utils/hashfile.py",
      "utils/hmac_generate.py",
      "utils/httpbrute.py",
      "utils/luncheck.py",
      "utils/passwords.txt",
      "utils/rsa-decrypt.py",
      "utils/rsa-encrypt.py",
      "utils/rsa-keygen.py",
      "utils/rsa-sign.py",
      "utils/rsa-verify.py",
      "utils/scrypt-crack.py",
      "utils/scrypt-generate.py",
      "utils/scrypt-verify.py",
      "utils/skey.py"
    ]
  },
  "results": [
    {
      "check_id": "python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
      "end": { "col": 74, "line": 10, "offset": 205 },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": { "col": 74, "line": 10, "offset": 205 },
                "path": "bad/api_list.py",
                "start": { "col": 22, "line": 10, "offset": 153 }
              },
              "'http://127.0.1.1:5000/api/post/{}'.format(username)"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": { "col": 57, "line": 10, "offset": 188 },
                "path": "bad/api_list.py",
                "start": { "col": 22, "line": 10, "offset": 153 }
              },
              "'http://127.0.1.1:5000/api/post/{}'"
            ]
          ]
        },
        "engine_kind": "OSS",
        "fingerprint": "11b1d9a5528219337bc400e30baf7e4ffb679e64f9b7c8e37aef3f8cbe3d743c785c077e504f0ac62dd918e50aaf1337688278ede7ce42221bd867b7a4dee648_0",
        "is_ignored": false,
        "lines": "    r = requests.get('http://127.0.1.1:5000/api/post/{}'.format(username))",
        "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
        "metadata": {
          "asvs": {
            "control_id": "9.1.1 Weak TLS",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
            "section": "V9 Communications Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9653,
              "rule_id": "6JUjpG",
              "rv_id": 110396,
              "url": "https://semgrep.dev/playground/r/RGTDRDO/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
              "version_id": "RGTDRDO"
            }
          },
          "shortlink": "https://sg.run/W8J4",
          "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
          "subcategory": ["audit"],
          "technology": ["requests"],
          "vulnerability_class": ["Mishandled Sensitive Information"]
        },
        "metavars": {
          "$SINK": {
            "abstract_content": "'http://127.0.1.1:5000/api/post/{}'.format(username)",
            "end": { "col": 74, "line": 10, "offset": 205 },
            "start": { "col": 22, "line": 10, "offset": 153 }
          },
          "$URL": {
            "abstract_content": "http://127.0.1.1:5000/api/post/{}",
            "end": { "col": 56, "line": 10, "offset": 187 },
            "start": { "col": 23, "line": 10, "offset": 154 }
          },
          "$W": {
            "abstract_content": "get",
            "end": { "col": 21, "line": 10, "offset": 152 },
            "start": { "col": 18, "line": 10, "offset": 149 }
          }
        },
        "severity": "INFO",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/api_list.py",
      "start": { "col": 22, "line": 10, "offset": 153 }
    },
    {
      "check_id": "python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
      "end": { "col": 58, "line": 16, "offset": 372 },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": { "col": 58, "line": 16, "offset": 372 },
                "path": "bad/api_post.py",
                "start": { "col": 27, "line": 16, "offset": 341 }
              },
              "'http://127.0.1.1:5000/api/key'"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": { "col": 58, "line": 16, "offset": 372 },
                "path": "bad/api_post.py",
                "start": { "col": 27, "line": 16, "offset": 341 }
              },
              "'http://127.0.1.1:5000/api/key'"
            ]
          ]
        },
        "engine_kind": "OSS",
        "fingerprint": "722b20ed7d6302199660d57b82ee37de454d3c5451b27ad73d5b7391cd6423f97c526e062279a088456745e6b0592e098bde672625595500706634c5bc4704be_0",
        "is_ignored": false,
        "lines": "        r = requests.post('http://127.0.1.1:5000/api/key', json={'username':username, 'password':password})",
        "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
        "metadata": {
          "asvs": {
            "control_id": "9.1.1 Weak TLS",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
            "section": "V9 Communications Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9653,
              "rule_id": "6JUjpG",
              "rv_id": 110396,
              "url": "https://semgrep.dev/playground/r/RGTDRDO/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
              "version_id": "RGTDRDO"
            }
          },
          "shortlink": "https://sg.run/W8J4",
          "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
          "subcategory": ["audit"],
          "technology": ["requests"],
          "vulnerability_class": ["Mishandled Sensitive Information"]
        },
        "metavars": {
          "$SINK": {
            "abstract_content": "'http://127.0.1.1:5000/api/key'",
            "end": { "col": 58, "line": 16, "offset": 372 },
            "start": { "col": 27, "line": 16, "offset": 341 }
          },
          "$URL": {
            "abstract_content": "http://127.0.1.1:5000/api/key",
            "end": { "col": 57, "line": 16, "offset": 371 },
            "start": { "col": 28, "line": 16, "offset": 342 }
          },
          "$W": {
            "abstract_content": "post",
            "end": { "col": 26, "line": 16, "offset": 340 },
            "start": { "col": 22, "line": 16, "offset": 336 }
          }
        },
        "severity": "INFO",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/api_post.py",
      "start": { "col": 27, "line": 16, "offset": 341 }
    },
    {
      "check_id": "python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
      "end": { "col": 55, "line": 30, "offset": 849 },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": { "col": 55, "line": 30, "offset": 849 },
                "path": "bad/api_post.py",
                "start": { "col": 23, "line": 30, "offset": 817 }
              },
              "'http://127.0.1.1:5000/api/post'"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": { "col": 55, "line": 30, "offset": 849 },
                "path": "bad/api_post.py",
                "start": { "col": 23, "line": 30, "offset": 817 }
              },
              "'http://127.0.1.1:5000/api/post'"
            ]
          ]
        },
        "engine_kind": "OSS",
        "fingerprint": "743cbb63312bbe9f0b8dcd808ab1b1ac0bde9d2f008c9ecc9686258773c7ee718ddc11961cb51afee7950d8b9f5a8d9efc43cec60f2e6650cef1fa488b7f0a33_0",
        "is_ignored": false,
        "lines": "    r = requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key})",
        "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
        "metadata": {
          "asvs": {
            "control_id": "9.1.1 Weak TLS",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
            "section": "V9 Communications Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9653,
              "rule_id": "6JUjpG",
              "rv_id": 110396,
              "url": "https://semgrep.dev/playground/r/RGTDRDO/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
              "version_id": "RGTDRDO"
            }
          },
          "shortlink": "https://sg.run/W8J4",
          "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
          "subcategory": ["audit"],
          "technology": ["requests"],
          "vulnerability_class": ["Mishandled Sensitive Information"]
        },
        "metavars": {
          "$SINK": {
            "abstract_content": "'http://127.0.1.1:5000/api/post'",
            "end": { "col": 55, "line": 30, "offset": 849 },
            "start": { "col": 23, "line": 30, "offset": 817 }
          },
          "$URL": {
            "abstract_content": "http://127.0.1.1:5000/api/post",
            "end": { "col": 54, "line": 30, "offset": 848 },
            "start": { "col": 24, "line": 30, "offset": 818 }
          },
          "$W": {
            "abstract_content": "post",
            "end": { "col": 22, "line": 30, "offset": 816 },
            "start": { "col": 18, "line": 30, "offset": 812 }
          }
        },
        "severity": "INFO",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/api_post.py",
      "start": { "col": 23, "line": 30, "offset": 817 }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "end": { "col": 103, "line": 19, "offset": 549 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "898aaac21c8fffc66e59b9aaf2fd0b2ff56fda4ffe6962ae013f289424b37468a1ea2e1e87f60f15a131530d539f9f13bae46d3aaf85334fecc31392a633dbc6_0",
        "is_ignored": false,
        "lines": "        c.execute(\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\" %(u, p, 0))",
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9637,
              "rule_id": "3qUP9k",
              "rv_id": 110388,
              "url": "https://semgrep.dev/playground/r/0bTLexz/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "version_id": "0bTLexz"
            }
          },
          "shortlink": "https://sg.run/EkWw",
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "subcategory": ["audit"],
          "technology": ["python"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "c",
            "end": { "col": 10, "line": 19, "offset": 456 },
            "start": { "col": 9, "line": 19, "offset": 455 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/db.py",
      "start": { "col": 9, "line": 19, "offset": 455 }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "end": { "col": 103, "line": 19, "offset": 549 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "5e0e088fa78c1216d8a8819c85a5375a940678dccb59647a031c9b3ebf7652654770f75012608611a6f4d448d94de26b438154893314e6baf565d52c4c5c0146_0",
        "is_ignored": false,
        "lines": "        c.execute(\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\" %(u, p, 0))",
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 110498,
              "url": "https://semgrep.dev/playground/r/A8T9Xrg/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "A8T9Xrg"
            }
          },
          "shortlink": "https://sg.run/2b1L",
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "subcategory": ["audit"],
          "technology": ["sqlalchemy"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$CONNECTION": {
            "abstract_content": "c",
            "end": { "col": 10, "line": 19, "offset": 456 },
            "start": { "col": 9, "line": 19, "offset": 455 }
          },
          "$SQL": {
            "abstract_content": "\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\"",
            "end": { "col": 91, "line": 19, "offset": 537 },
            "start": { "col": 19, "line": 19, "offset": 465 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/db.py",
      "start": { "col": 9, "line": 19, "offset": 455 }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "end": { "col": 151, "line": 20, "offset": 545 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "30da54ca8e388dcbc743002f7bbbe80201e67223beda645a7ce8663fda417e57f0afdd8048492b239d09a39e4a49f5cbfd3a306de8c902998e68d34a54b435aa_0",
        "is_ignored": false,
        "lines": "        c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(u, p, 0, 0, ''))",
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9637,
              "rule_id": "3qUP9k",
              "rv_id": 110388,
              "url": "https://semgrep.dev/playground/r/0bTLexz/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "version_id": "0bTLexz"
            }
          },
          "shortlink": "https://sg.run/EkWw",
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "subcategory": ["audit"],
          "technology": ["python"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "c",
            "end": { "col": 10, "line": 20, "offset": 404 },
            "start": { "col": 9, "line": 20, "offset": 403 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/db_init.py",
      "start": { "col": 9, "line": 20, "offset": 403 }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "end": { "col": 151, "line": 20, "offset": 545 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "3d2c9d67467d7082095aed06da8e2a7ab051256ec3c7c13293332cfa75251516e00a811a22353d8c33334e3b6f1694c0f2312b1bf2a6574c98a2003cda79101e_0",
        "is_ignored": false,
        "lines": "        c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(u, p, 0, 0, ''))",
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 110498,
              "url": "https://semgrep.dev/playground/r/A8T9Xrg/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "A8T9Xrg"
            }
          },
          "shortlink": "https://sg.run/2b1L",
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "subcategory": ["audit"],
          "technology": ["sqlalchemy"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$CONNECTION": {
            "abstract_content": "c",
            "end": { "col": 10, "line": 20, "offset": 404 },
            "start": { "col": 9, "line": 20, "offset": 403 }
          },
          "$SQL": {
            "abstract_content": "\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\"",
            "end": { "col": 132, "line": 20, "offset": 526 },
            "start": { "col": 19, "line": 20, "offset": 413 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/db_init.py",
      "start": { "col": 9, "line": 20, "offset": 403 }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "end": { "col": 113, "line": 12, "offset": 315 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "a4be963cefc1dff61d991ff3d1074f5440fbb9bbdf03abb29ad0ff558f94a5a63a1df5b67ccfa7d3cdb4e2f4f6a2e554bc2aad90c9ff35fd2ae34776bb3bbc05_0",
        "is_ignored": false,
        "lines": "    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()",
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9637,
              "rule_id": "3qUP9k",
              "rv_id": 110388,
              "url": "https://semgrep.dev/playground/r/0bTLexz/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "version_id": "0bTLexz"
            }
          },
          "shortlink": "https://sg.run/EkWw",
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "subcategory": ["audit"],
          "technology": ["python"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "c",
            "end": { "col": 13, "line": 12, "offset": 215 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 10, "offset": 201 },
              "svalue_start": { "col": 9, "line": 10, "offset": 188 }
            },
            "start": { "col": 12, "line": 12, "offset": 214 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/libuser.py",
      "start": { "col": 12, "line": 12, "offset": 214 }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "end": { "col": 113, "line": 12, "offset": 315 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "536a3d633673b11ae17c0762e925bf15cb941d40a44efbae08174303f6a0fd41d0d3f6cfb69bd7a34313d2d0f5eca7089d5b91a92ed26089c1d1d58ddcf93efb_0",
        "is_ignored": false,
        "lines": "    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()",
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 110498,
              "url": "https://semgrep.dev/playground/r/A8T9Xrg/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "A8T9Xrg"
            }
          },
          "shortlink": "https://sg.run/2b1L",
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "subcategory": ["audit"],
          "technology": ["sqlalchemy"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$CONNECTION": {
            "abstract_content": "c",
            "end": { "col": 13, "line": 12, "offset": 215 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 10, "offset": 201 },
              "svalue_start": { "col": 9, "line": 10, "offset": 188 }
            },
            "start": { "col": 12, "line": 12, "offset": 214 }
          },
          "$SQL": {
            "abstract_content": "\"SELECT * FROM users WHERE username = '{}' and password = '{}'\"",
            "end": { "col": 85, "line": 12, "offset": 287 },
            "start": { "col": 22, "line": 12, "offset": 224 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/libuser.py",
      "start": { "col": 12, "line": 12, "offset": 214 }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "end": { "col": 161, "line": 25, "offset": 668 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "a4be963cefc1dff61d991ff3d1074f5440fbb9bbdf03abb29ad0ff558f94a5a63a1df5b67ccfa7d3cdb4e2f4f6a2e554bc2aad90c9ff35fd2ae34776bb3bbc05_1",
        "is_ignored": false,
        "lines": "    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))",
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9637,
              "rule_id": "3qUP9k",
              "rv_id": 110388,
              "url": "https://semgrep.dev/playground/r/0bTLexz/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "version_id": "0bTLexz"
            }
          },
          "shortlink": "https://sg.run/EkWw",
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "subcategory": ["audit"],
          "technology": ["python"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "c",
            "end": { "col": 6, "line": 25, "offset": 513 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 23, "offset": 506 },
              "svalue_start": { "col": 9, "line": 23, "offset": 493 }
            },
            "start": { "col": 5, "line": 25, "offset": 512 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/libuser.py",
      "start": { "col": 5, "line": 25, "offset": 512 }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "end": { "col": 161, "line": 25, "offset": 668 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "dba63dc098a2b45ae7f2ef310f209bed426483f3f7d62670d14712549067d07a04a7d8766f9c40229faa823a308bf390e7ad46755bc1e6585a495fdfa11bf92e_0",
        "is_ignored": false,
        "lines": "    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))",
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 110498,
              "url": "https://semgrep.dev/playground/r/A8T9Xrg/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "A8T9Xrg"
            }
          },
          "shortlink": "https://sg.run/2b1L",
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "subcategory": ["audit"],
          "technology": ["sqlalchemy"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$CONNECTION": {
            "abstract_content": "c",
            "end": { "col": 6, "line": 25, "offset": 513 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 23, "offset": 506 },
              "svalue_start": { "col": 9, "line": 23, "offset": 493 }
            },
            "start": { "col": 5, "line": 25, "offset": 512 }
          },
          "$SQL": {
            "abstract_content": "\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\"",
            "end": { "col": 128, "line": 25, "offset": 635 },
            "start": { "col": 15, "line": 25, "offset": 522 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/libuser.py",
      "start": { "col": 5, "line": 25, "offset": 512 }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "end": { "col": 99, "line": 53, "offset": 1301 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "a4be963cefc1dff61d991ff3d1074f5440fbb9bbdf03abb29ad0ff558f94a5a63a1df5b67ccfa7d3cdb4e2f4f6a2e554bc2aad90c9ff35fd2ae34776bb3bbc05_2",
        "is_ignored": false,
        "lines": "    c.execute(\"UPDATE users SET password = '{}' WHERE username = '{}'\".format(password, username))",
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9637,
              "rule_id": "3qUP9k",
              "rv_id": 110388,
              "url": "https://semgrep.dev/playground/r/0bTLexz/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "version_id": "0bTLexz"
            }
          },
          "shortlink": "https://sg.run/EkWw",
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "subcategory": ["audit"],
          "technology": ["python"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "c",
            "end": { "col": 6, "line": 53, "offset": 1208 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 51, "offset": 1201 },
              "svalue_start": { "col": 9, "line": 51, "offset": 1188 }
            },
            "start": { "col": 5, "line": 53, "offset": 1207 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/libuser.py",
      "start": { "col": 5, "line": 53, "offset": 1207 }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "end": { "col": 99, "line": 53, "offset": 1301 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "a225c38533c2ed169712c8863ff54251f69a1d5c399ae8f69ecb21d3431a99ecbbbe20a2c98ff59e59cdd1fd3e9152d024a63df788da44d73f5489f901aa5c57_0",
        "is_ignored": false,
        "lines": "    c.execute(\"UPDATE users SET password = '{}' WHERE username = '{}'\".format(password, username))",
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 110498,
              "url": "https://semgrep.dev/playground/r/A8T9Xrg/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "A8T9Xrg"
            }
          },
          "shortlink": "https://sg.run/2b1L",
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "subcategory": ["audit"],
          "technology": ["sqlalchemy"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$CONNECTION": {
            "abstract_content": "c",
            "end": { "col": 6, "line": 53, "offset": 1208 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 51, "offset": 1201 },
              "svalue_start": { "col": 9, "line": 51, "offset": 1188 }
            },
            "start": { "col": 5, "line": 53, "offset": 1207 }
          },
          "$SQL": {
            "abstract_content": "\"UPDATE users SET password = '{}' WHERE username = '{}'\"",
            "end": { "col": 71, "line": 53, "offset": 1273 },
            "start": { "col": 15, "line": 53, "offset": 1217 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/libuser.py",
      "start": { "col": 5, "line": 53, "offset": 1207 }
    },
    {
      "check_id": "html.security.audit.missing-integrity.missing-integrity",
      "end": { "col": 91, "line": 29, "offset": 999 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "4ba11a9eb0af79f02e19317b380d3f36b51a919ac02a09f4336d76d4d717fa3f55fcd20193f186e96ce623bd1360ea8cc243b5a2f1afaeab426d4a29b3b28c32_0",
        "is_ignored": false,
        "lines": "            <td><script src=\"https://apis.google.com/js/platform.js\" async defer></script><g:plusone></g:plusone></td>",
        "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": ["CWE-353: Missing Support for Integrity Check"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A08:2021 - Software and Data Integrity Failures"],
          "references": [
            "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13728,
              "rule_id": "AbUQzj",
              "rv_id": 727930,
              "url": "https://semgrep.dev/playground/r/rxT2BP3/html.security.audit.missing-integrity.missing-integrity",
              "version_id": "rxT2BP3"
            }
          },
          "shortlink": "https://sg.run/krXA",
          "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
          "subcategory": ["audit"],
          "technology": ["html"],
          "vulnerability_class": ["Cryptographic Issues"]
        },
        "metavars": {
          "$...A": {
            "abstract_content": " src=\"https://apis.google.com/js/platform.js\" async defer",
            "end": { "col": 81, "line": 29, "offset": 989 },
            "start": { "col": 24, "line": 29, "offset": 932 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/csp.html",
      "start": { "col": 17, "line": 29, "offset": 925 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 14, "offset": 535 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "fbfd39c5cf95ce096d7f94ac2ab5e23866c1a07e21d0f3093754150d02b70bc1f3c3515350fe564e4198136cdcc3fe81058b1acbfb5d94793ed5eb8e202c71d8_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>OTP</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Enable</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 242 },
            "start": { "col": 19, "line": 8, "offset": 238 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/mfa.enable.html",
      "start": { "col": 5, "line": 8, "offset": 224 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 14, "line": 17, "offset": 621 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "49f4087108018095c373da37e7cf947b9ffecf7561b197a7d02dce263eb4c398ebb3c133793f2ee9cf49043c2930c1e0d29a791da86b4c7e43820347fb18b684_0",
        "is_ignored": false,
        "lines": "      <form method=\"POST\" action=\"/posts/\" class=\"w3-padding-16\">\n        <div class=\"w3-rest\">\n          <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n        </div>\n      </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 25, "line": 13, "offset": 415 },
            "start": { "col": 21, "line": 13, "offset": 411 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/posts.view.html",
      "start": { "col": 7, "line": 13, "offset": 397 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 16, "offset": 674 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "17b6bb44b2e875df9a92d8ebc5bccc61e4f5f05030f6d10f6dafc06a8fb430bb1d884c736787d83fe24703a7ac08c7cf5186024fba296e29c3f799865ab860d7_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>New Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"password\" required>\n        <label><b>Again</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password_again\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Change</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 220 },
            "start": { "col": 19, "line": 8, "offset": 216 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/user.chpasswd.html",
      "start": { "col": 5, "line": 8, "offset": 202 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 18, "offset": 814 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "beefaf54a79ba707c022c3c9f489a2f91231197d767e06f6d386f5279cbd3daa3e5511fff997e2a550818909485ce0fe0986d10b6e14c54803a2e0b023c039f2_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"email\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Create</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 241 },
            "start": { "col": 19, "line": 8, "offset": 237 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/user.create.html",
      "start": { "col": 5, "line": 8, "offset": 223 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 16, "offset": 653 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "32e67fabb4d536104526d2261eb981ca3fc1d813f0277c7a7054a7e43792a925cef8b3d762e7193f65834a8e28b03776c07f3067cc3f614b8ddd2ffad5d246e1_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 214 },
            "start": { "col": 19, "line": 8, "offset": 210 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/user.login.html",
      "start": { "col": 5, "line": 8, "offset": 196 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 18, "offset": 802 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "e490c2dec60f3718033dacc815f642bcd901f3e83adc5d682498ee1d3cd146fc2183a57ef9ae71eb0bc83aca9ee44401abd08f0652b07cfb56d0fbcd3931de16_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"password\" required>\n        <label><b>OTP (if enabled in your account)</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\">\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 214 },
            "start": { "col": 19, "line": 8, "offset": 210 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/user.login.mfa.html",
      "start": { "col": 5, "line": 8, "offset": 196 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 11, "offset": 420 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "46e82161131f4e36ad6a03c82d8342db6d2b24a66be0dedc53962c8a0557719ff8c9c92466c38fd180715922cd29f02e43356a2cecf668ff3d9dd61fab4c433c_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" action=\"/post\" class=\"w3-padding-16\">\n      <div class=\"w3-rest\">\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 7, "offset": 224 },
            "start": { "col": 19, "line": 7, "offset": 220 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/templates/welcome.html",
      "start": { "col": 5, "line": 7, "offset": 206 }
    },
    {
      "check_id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
      "end": { "col": 37, "line": 13, "offset": 270 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "7cf0f33f4c5e0bc69c1896c5885c7528b2ccfcf4040ee00a2baf31ff6390973e6bd4995ffce719ae4a71638ed7c9d35e3ad4b352ddbc76ba0811fc5ac514b006_0",
        "is_ignored": false,
        "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'",
        "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A05:2021 - Security Misconfiguration"],
          "references": [
            "https://bento.dev/checks/flask/avoid-hardcoded-config/",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9537,
              "rule_id": "4bUkX0",
              "rv_id": 110253,
              "url": "https://semgrep.dev/playground/r/X0TQxP6/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
              "version_id": "X0TQxP6"
            }
          },
          "shortlink": "https://sg.run/Ekde",
          "source": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
          "subcategory": ["audit"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$M": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 13, "offset": 237 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 12, "offset": 233 },
              "svalue_start": { "col": 7, "line": 12, "offset": 219 }
            },
            "start": { "col": 1, "line": 13, "offset": 234 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/vulpy-ssl.py",
      "start": { "col": 1, "line": 13, "offset": 234 }
    },
    {
      "check_id": "python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
      "end": { "col": 87, "line": 29, "offset": 720 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "2ec8fea0bc59e89b0e9b0bdf7d1ad4620034370fbac208ea606f1e7299c04eb15c57382da9f922e1b5fa89c0ed65401e7a27e45b7311a175c4facd3a3a030b3e_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
        "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2021 - Broken Access Control"],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9533,
              "rule_id": "8GUjdX",
              "rv_id": 110249,
              "url": "https://semgrep.dev/playground/r/o5Tglnv/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "version_id": "o5Tglnv"
            }
          },
          "shortlink": "https://sg.run/vz5b",
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Other"]
        },
        "metavars": {},
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/vulpy-ssl.py",
      "start": { "col": 1, "line": 29, "offset": 634 }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "end": { "col": 87, "line": 29, "offset": 720 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "6267224bcc6cc400fd39a6f8e951b4ff2f830b96048ce28a01dc39d7a0aa2d71f00f40aca9842ac027429bcfdeae9bf61b06425f6931cd764e617ac5980de8ac_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 110250,
              "url": "https://semgrep.dev/playground/r/zyTK85o/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "zyTK85o"
            }
          },
          "shortlink": "https://sg.run/dKrd",
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 29, "offset": 637 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 12, "offset": 233 },
              "svalue_start": { "col": 7, "line": 12, "offset": 219 }
            },
            "start": { "col": 1, "line": 29, "offset": 634 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/vulpy-ssl.py",
      "start": { "col": 1, "line": 29, "offset": 634 }
    },
    {
      "check_id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
      "end": { "col": 37, "line": 16, "offset": 351 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "ad94d6128beb1327a914e9f8517298c80da077010dda3d29c3762f2826a3ce687e5378bda8feba6c0e0a0d3399032c1d1b7ebc2006abcd2034604391c6b4d908_0",
        "is_ignored": false,
        "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'",
        "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A05:2021 - Security Misconfiguration"],
          "references": [
            "https://bento.dev/checks/flask/avoid-hardcoded-config/",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9537,
              "rule_id": "4bUkX0",
              "rv_id": 110253,
              "url": "https://semgrep.dev/playground/r/X0TQxP6/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
              "version_id": "X0TQxP6"
            }
          },
          "shortlink": "https://sg.run/Ekde",
          "source": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
          "subcategory": ["audit"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$M": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 16, "offset": 318 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 15, "offset": 314 },
              "svalue_start": { "col": 7, "line": 15, "offset": 300 }
            },
            "start": { "col": 1, "line": 16, "offset": 315 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/vulpy.py",
      "start": { "col": 1, "line": 16, "offset": 315 }
    },
    {
      "check_id": "python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
      "end": { "col": 72, "line": 55, "offset": 1341 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "66c1d49ca03cdf0981f7fcc7eb7743b21e0a314abbec0c7994761a1c1c49f6f0e586d6c18b54f1f711a68e547f8d87e9663c4aff0da1579213fea255e2a26855_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', port=5000, extra_files='csp.txt')",
        "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2021 - Broken Access Control"],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9533,
              "rule_id": "8GUjdX",
              "rv_id": 110249,
              "url": "https://semgrep.dev/playground/r/o5Tglnv/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "version_id": "o5Tglnv"
            }
          },
          "shortlink": "https://sg.run/vz5b",
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Other"]
        },
        "metavars": {},
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/vulpy.py",
      "start": { "col": 1, "line": 55, "offset": 1270 }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "end": { "col": 72, "line": 55, "offset": 1341 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "69fd56eb04f3df50119a6b5594e59e722c9efebc26bcdecde51fbd7f878859aa6d3fcd6cd010524cbdf8d76e2d371e765c30d48f95e41045f716375e4a9d1922_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', port=5000, extra_files='csp.txt')",
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 110250,
              "url": "https://semgrep.dev/playground/r/zyTK85o/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "zyTK85o"
            }
          },
          "shortlink": "https://sg.run/dKrd",
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 55, "offset": 1273 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 15, "offset": 314 },
              "svalue_start": { "col": 7, "line": 15, "offset": 300 }
            },
            "start": { "col": 1, "line": 55, "offset": 1270 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "bad/vulpy.py",
      "start": { "col": 1, "line": 55, "offset": 1270 }
    },
    {
      "check_id": "python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
      "end": { "col": 33, "line": 22, "offset": 298 },
      "extra": {
        "dataflow_trace": {
          "intermediate_vars": [
            {
              "content": "URL",
              "location": {
                "end": { "col": 4, "line": 5, "offset": 44 },
                "path": "good/httpbrute.py",
                "start": { "col": 1, "line": 5, "offset": 41 }
              }
            },
            {
              "content": "URL",
              "location": {
                "end": { "col": 4, "line": 5, "offset": 44 },
                "path": "good/httpbrute.py",
                "start": { "col": 1, "line": 5, "offset": 41 }
              }
            }
          ],
          "taint_sink": [
            "CliLoc",
            [
              {
                "end": { "col": 33, "line": 22, "offset": 298 },
                "path": "good/httpbrute.py",
                "start": { "col": 30, "line": 22, "offset": 295 }
              },
              "URL"
            ]
          ],
          "taint_source": [
            "CliLoc",
            [
              {
                "end": { "col": 41, "line": 5, "offset": 81 },
                "path": "good/httpbrute.py",
                "start": { "col": 7, "line": 5, "offset": 47 }
              },
              "'http://127.0.1.1:5000/user/login'"
            ]
          ]
        },
        "engine_kind": "OSS",
        "fingerprint": "439a23b0cbcdaf81645d52c23952ec6ede9f74cfa0e0ad669bb4f8b551fb723b9b1a1f7d12df8db42ccd3462b1ea488a9a065b9f1e5665db613caca071b82736_0",
        "is_ignored": false,
        "lines": "    response = requests.post(URL, data = {'username': username, 'password': password})",
        "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.",
        "metadata": {
          "asvs": {
            "control_id": "9.1.1 Weak TLS",
            "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements",
            "section": "V9 Communications Verification Requirements",
            "version": "4"
          },
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": [
            "A03:2017 - Sensitive Data Exposure",
            "A02:2021 - Cryptographic Failures"
          ],
          "references": [
            "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9653,
              "rule_id": "6JUjpG",
              "rv_id": 110396,
              "url": "https://semgrep.dev/playground/r/RGTDRDO/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
              "version_id": "RGTDRDO"
            }
          },
          "shortlink": "https://sg.run/W8J4",
          "source": "https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http",
          "subcategory": ["audit"],
          "technology": ["requests"],
          "vulnerability_class": ["Mishandled Sensitive Information"]
        },
        "metavars": {
          "$SINK": {
            "abstract_content": "URL",
            "end": { "col": 33, "line": 22, "offset": 298 },
            "propagated_value": {
              "svalue_abstract_content": "'http://127.0.1.1:5000/user/login'",
              "svalue_end": { "col": 41, "line": 5, "offset": 81 },
              "svalue_start": { "col": 7, "line": 5, "offset": 47 }
            },
            "start": { "col": 30, "line": 22, "offset": 295 }
          },
          "$URL": {
            "abstract_content": "http://127.0.1.1:5000/user/login",
            "end": { "col": 40, "line": 5, "offset": 80 },
            "start": { "col": 8, "line": 5, "offset": 48 }
          },
          "$W": {
            "abstract_content": "post",
            "end": { "col": 29, "line": 22, "offset": 294 },
            "start": { "col": 25, "line": 22, "offset": 290 }
          }
        },
        "severity": "INFO",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/httpbrute.py",
      "start": { "col": 30, "line": 22, "offset": 295 }
    },
    {
      "check_id": "python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
      "end": { "col": 18, "line": 24, "offset": 448 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "67a6153abd195b61eb48d5788cc067d18de4909fc18e6904fe7eab1b9bff0f939e53ae9af666209d2af65dcef6dbcdac5c415334d63be3c8253bf99bda98dc5e_0",
        "is_ignored": false,
        "lines": "        }, secret, algorithm='HS256').decode()",
        "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": ["CWE-522: Insufficiently Protected Credentials"],
          "cwe2021-top25": true,
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": [
            "A02:2017 - Broken Authentication",
            "A04:2021 - Insecure Design"
          ],
          "references": [
            "https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9557,
              "rule_id": "X5U8P5",
              "rv_id": 110290,
              "url": "https://semgrep.dev/playground/r/l4T4vPA/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
              "version_id": "l4T4vPA"
            }
          },
          "shortlink": "https://sg.run/l2E9",
          "source": "https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret",
          "subcategory": ["vuln"],
          "technology": ["jwt"],
          "vulnerability_class": ["Cryptographic Issues"]
        },
        "metavars": {
          "$SECRET": {
            "abstract_content": "secret",
            "end": { "col": 18, "line": 24, "offset": 448 },
            "propagated_value": {
              "svalue_abstract_content": "'MYSUPERSECRETKEY'",
              "svalue_end": { "col": 28, "line": 10, "offset": 141 },
              "svalue_start": { "col": 10, "line": 10, "offset": 123 }
            },
            "start": { "col": 12, "line": 24, "offset": 442 }
          },
          "$X": {
            "abstract_content": "{'username'username'nbf'now'exp'now+not_after}",
            "end": { "col": 10, "line": 24, "offset": 440 },
            "start": { "col": 24, "line": 20, "offset": 348 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/libapi.py",
      "start": { "col": 12, "line": 24, "offset": 442 }
    },
    {
      "check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
      "end": { "col": 171, "line": 61, "offset": 1523 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "9202a8fdd0ff611727736f551eb3e72a5625309a1832d47666cebdc6fd0d3ece2c54f9654d52fc081d836ffeb35a1cc2df6840ff3fa47d5c9a824f9596402e6d_0",
        "is_ignored": false,
        "lines": "    c.execute(\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\" %(username, '', '', 0, 0, ''))",
        "message": "Detected possible formatted SQL query. Use parameterized queries instead.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://stackoverflow.com/questions/775296/mysql-parameterized-queries"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9637,
              "rule_id": "3qUP9k",
              "rv_id": 110388,
              "url": "https://semgrep.dev/playground/r/0bTLexz/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "version_id": "0bTLexz"
            }
          },
          "shortlink": "https://sg.run/EkWw",
          "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
          "subcategory": ["audit"],
          "technology": ["python"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$DB": {
            "abstract_content": "c",
            "end": { "col": 6, "line": 61, "offset": 1358 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 60, "offset": 1352 },
              "svalue_start": { "col": 9, "line": 60, "offset": 1339 }
            },
            "start": { "col": 5, "line": 61, "offset": 1357 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/libuser.py",
      "start": { "col": 5, "line": 61, "offset": 1357 }
    },
    {
      "check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
      "end": { "col": 171, "line": 61, "offset": 1523 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "dcd4a06e094257c0d0d9a242f3bb6450985d74d4f74081fe221c4f82a3c4c171e7877e5e0ce83ce850658c12e68fb8abe579d1c9dc0a5198d6c318c5a23f2159_0",
        "is_ignored": false,
        "lines": "    c.execute(\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\" %(username, '', '', 0, 0, ''))",
        "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": [
            "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
          ],
          "cwe2021-top25": true,
          "cwe2022-top25": true,
          "impact": "HIGH",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"],
          "references": [
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql",
            "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm",
            "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 10563,
              "rule_id": "oqUz5y",
              "rv_id": 110498,
              "url": "https://semgrep.dev/playground/r/A8T9Xrg/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
              "version_id": "A8T9Xrg"
            }
          },
          "shortlink": "https://sg.run/2b1L",
          "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query",
          "subcategory": ["audit"],
          "technology": ["sqlalchemy"],
          "vulnerability_class": ["SQL Injection"]
        },
        "metavars": {
          "$CONNECTION": {
            "abstract_content": "c",
            "end": { "col": 6, "line": 61, "offset": 1358 },
            "propagated_value": {
              "svalue_abstract_content": "conn.cursor()",
              "svalue_end": { "col": 22, "line": 60, "offset": 1352 },
              "svalue_start": { "col": 9, "line": 60, "offset": 1339 }
            },
            "start": { "col": 5, "line": 61, "offset": 1357 }
          },
          "$SQL": {
            "abstract_content": "\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\"",
            "end": { "col": 140, "line": 61, "offset": 1492 },
            "start": { "col": 15, "line": 61, "offset": 1367 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/libuser.py",
      "start": { "col": 5, "line": 61, "offset": 1357 }
    },
    {
      "check_id": "html.security.audit.missing-integrity.missing-integrity",
      "end": { "col": 91, "line": 29, "offset": 999 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "be2fe1e840f202c8743bdd1a08f68e42528b21ac48ea21cd34524443747d579549d2a925df4eb16d05c5154656761dafecc361b69a9d657ed18a2f41b8d51bfe_0",
        "is_ignored": false,
        "lines": "            <td><script src=\"https://apis.google.com/js/platform.js\" async defer></script><g:plusone></g:plusone></td>",
        "message": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": ["CWE-353: Missing Support for Integrity Check"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A08:2021 - Software and Data Integrity Failures"],
          "references": [
            "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 13728,
              "rule_id": "AbUQzj",
              "rv_id": 727930,
              "url": "https://semgrep.dev/playground/r/rxT2BP3/html.security.audit.missing-integrity.missing-integrity",
              "version_id": "rxT2BP3"
            }
          },
          "shortlink": "https://sg.run/krXA",
          "source": "https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity",
          "subcategory": ["audit"],
          "technology": ["html"],
          "vulnerability_class": ["Cryptographic Issues"]
        },
        "metavars": {
          "$...A": {
            "abstract_content": " src=\"https://apis.google.com/js/platform.js\" async defer",
            "end": { "col": 81, "line": 29, "offset": 989 },
            "start": { "col": 24, "line": 29, "offset": 932 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/csp.html",
      "start": { "col": 17, "line": 29, "offset": 925 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 14, "offset": 535 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "d13b65059f87cd121299cc705beba271ce55801ebf58d5ecf71bc82fb19201e71e77a2f9c771503104ecffbda1dee3576df0f16831f36090a2d8a4e8cf10dabf_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>OTP</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Enable</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 242 },
            "start": { "col": 19, "line": 8, "offset": 238 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/mfa.enable.html",
      "start": { "col": 5, "line": 8, "offset": 224 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 14, "line": 17, "offset": 621 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "fa8a9fd57dd918f40675560fde70ce304a9ec0240858095b86e158c829737e83b7c3bb0be09857fb5c931abea1967cd36cef066e0c4c6a93f87c096878fb033d_0",
        "is_ignored": false,
        "lines": "      <form method=\"POST\" action=\"/posts/\" class=\"w3-padding-16\">\n        <div class=\"w3-rest\">\n          <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n        </div>\n      </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 25, "line": 13, "offset": 415 },
            "start": { "col": 21, "line": 13, "offset": 411 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/posts.view.html",
      "start": { "col": 7, "line": 13, "offset": 397 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 18, "offset": 853 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "f9993d82be93a34e55c014834d150bd7e9c0a475339ba4e35da7b922778eab466e5670eb3435009894d268479e49509961a1a1d32a5b01202ec108ef0f02f014_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Current Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"current_password\" required>\n        <label><b>New Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"new_password\" required>\n        <label><b>New Password (again)</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"new_password_again\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Change</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 220 },
            "start": { "col": 19, "line": 8, "offset": 216 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/user.chpasswd.html",
      "start": { "col": 5, "line": 8, "offset": 202 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 18, "offset": 814 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "bf0c29622a6db1b630a1520822c4034f7a419cd64292472a6c06c1c21af185a1de1a196caf5689eb94ce6abbac9d3c86a53d89998974c663c574ee9b8a49a60b_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"email\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Create</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 241 },
            "start": { "col": 19, "line": 8, "offset": 237 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/user.create.html",
      "start": { "col": 5, "line": 8, "offset": 223 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 16, "offset": 653 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "d697ac99ed48c2fb8d27f852c37998a3155a1d95ef2736448e7d9d611d436e0861af1ee61ff47ff1f38e1b48d0fa92f0c8d5bcfcbd35ca1b7876432435c9e1ac_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Email</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border\" type=\"password\" name=\"password\" required>\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 214 },
            "start": { "col": 19, "line": 8, "offset": 210 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/user.login.html",
      "start": { "col": 5, "line": 8, "offset": 196 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 18, "offset": 802 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "07fb8736081278c386d92614026b6857e76a658151dad56bf4d4bb692386889a573caeb0be33d93e839732b4c5618218ab61e84c31cce32b33f1980f52e88eb8_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" class=\"w3-padding-32\">\n      <div class=\"w3-section\">\n        <label><b>Username</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"text\" name=\"username\" required>\n        <label><b>Password</b></label>\n        <input class=\"w3-input w3-border w3-margin-bottom\" type=\"password\" name=\"password\" required>\n        <label><b>OTP (if enabled in your account)</b></label>\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"otp\">\n        <button class=\"w3-button w3-block w3-black w3-section w3-padding\" type=\"submit\">Login</button>\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 8, "offset": 214 },
            "start": { "col": 19, "line": 8, "offset": 210 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/user.login.mfa.html",
      "start": { "col": 5, "line": 8, "offset": 196 }
    },
    {
      "check_id": "python.django.security.django-no-csrf-token.django-no-csrf-token",
      "end": { "col": 12, "line": 11, "offset": 420 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "099d5412e47ac155f44f1fee1c8bd568b1f52aaffae2aff4b6bd8a5e938646c463a0b75322827d64ba24e7b1d62912cc57bb507209b3ed95ab0b18e17b39aa49_0",
        "is_ignored": false,
        "lines": "    <form method=\"POST\" action=\"/post\" class=\"w3-padding-16\">\n      <div class=\"w3-rest\">\n        <input class=\"w3-input w3-border\" type=\"text\" name=\"text\" placeholder=\"What are you thinking?\">\n      </div>\n    </form>",
        "message": "Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": "CWE-352: Cross-Site Request Forgery (CSRF)",
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "MEDIUM",
          "references": ["https://docs.djangoproject.com/en/4.2/howto/csrf/"],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 73471,
              "rule_id": "PeUyYG",
              "rv_id": 828674,
              "url": "https://semgrep.dev/playground/r/kbT21d9/python.django.security.django-no-csrf-token.django-no-csrf-token",
              "version_id": "kbT21d9"
            }
          },
          "shortlink": "https://sg.run/N0Bp",
          "source": "https://semgrep.dev/r/python.django.security.django-no-csrf-token.django-no-csrf-token",
          "subcategory": ["audit"],
          "technology": ["django"],
          "vulnerability_class": ["Cross-Site Request Forgery (CSRF)"]
        },
        "metavars": {
          "$1": {
            "abstract_content": "POST",
            "end": { "col": 5, "line": 1, "offset": 4 },
            "start": { "col": 1, "line": 1, "offset": 0 }
          },
          "$METHOD": {
            "abstract_content": "POST",
            "end": { "col": 23, "line": 7, "offset": 224 },
            "start": { "col": 19, "line": 7, "offset": 220 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/templates/welcome.html",
      "start": { "col": 5, "line": 7, "offset": 206 }
    },
    {
      "check_id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
      "end": { "col": 37, "line": 13, "offset": 270 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "cfc21e2e30a759d4e2e08ef7dbf6a93a73f7bd28cd442be08001b07ce15cad8656b679f3c87f87536814bc7a38ed31dafc19c3f839a7c707e08829e539ef92d4_0",
        "is_ignored": false,
        "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'",
        "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A05:2021 - Security Misconfiguration"],
          "references": [
            "https://bento.dev/checks/flask/avoid-hardcoded-config/",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9537,
              "rule_id": "4bUkX0",
              "rv_id": 110253,
              "url": "https://semgrep.dev/playground/r/X0TQxP6/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
              "version_id": "X0TQxP6"
            }
          },
          "shortlink": "https://sg.run/Ekde",
          "source": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
          "subcategory": ["audit"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$M": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 13, "offset": 237 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 12, "offset": 233 },
              "svalue_start": { "col": 7, "line": 12, "offset": 219 }
            },
            "start": { "col": 1, "line": 13, "offset": 234 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/vulpy-ssl.py",
      "start": { "col": 1, "line": 13, "offset": 234 }
    },
    {
      "check_id": "python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
      "end": { "col": 87, "line": 29, "offset": 720 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "3e5137525a3eef7f6b826c57d77838ed20480de97c5d2b2f0ffcf443e94a4d87a3af777e03a7c9c661ca4c25e3dbc2342f3c2aa16530e433beb5db3e2f491d44_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
        "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2021 - Broken Access Control"],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9533,
              "rule_id": "8GUjdX",
              "rv_id": 110249,
              "url": "https://semgrep.dev/playground/r/o5Tglnv/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "version_id": "o5Tglnv"
            }
          },
          "shortlink": "https://sg.run/vz5b",
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Other"]
        },
        "metavars": {},
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/vulpy-ssl.py",
      "start": { "col": 1, "line": 29, "offset": 634 }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "end": { "col": 87, "line": 29, "offset": 720 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "f96945a3f6c4c5180e48199061924090fa2780d84895bc10bc08fa9b7f0d8c3b041fcb02163b26484802cf7a098f3a33b8d4bb7822d2e6d2318a80f59fb7b6ac_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))",
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 110250,
              "url": "https://semgrep.dev/playground/r/zyTK85o/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "zyTK85o"
            }
          },
          "shortlink": "https://sg.run/dKrd",
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 29, "offset": 637 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 12, "offset": 233 },
              "svalue_start": { "col": 7, "line": 12, "offset": 219 }
            },
            "start": { "col": 1, "line": 29, "offset": 634 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/vulpy-ssl.py",
      "start": { "col": 1, "line": 29, "offset": 634 }
    },
    {
      "check_id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
      "end": { "col": 94, "line": 17, "offset": 409 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "17ee5c8fb3f5e98c86eb35d0c1f66301c4e58a854a5eba21986bfaf07bfe5ef6241091ba359f07315c5de5260488a529a274a3745e5e8fd47f9821411d2cf5b6_0",
        "is_ignored": false,
        "lines": "app.config['SECRET_KEY'] = '123aa8a93bdde342c871564a62282af857bda14b3359fde95d0c5e4b321610c1'",
        "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead",
        "metadata": {
          "category": "security",
          "confidence": "LOW",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "LOW",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A05:2021 - Security Misconfiguration"],
          "references": [
            "https://bento.dev/checks/flask/avoid-hardcoded-config/",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values",
            "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9537,
              "rule_id": "4bUkX0",
              "rv_id": 110253,
              "url": "https://semgrep.dev/playground/r/X0TQxP6/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
              "version_id": "X0TQxP6"
            }
          },
          "shortlink": "https://sg.run/Ekde",
          "source": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
          "subcategory": ["audit"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$M": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 17, "offset": 319 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 16, "offset": 315 },
              "svalue_start": { "col": 7, "line": 16, "offset": 301 }
            },
            "start": { "col": 1, "line": 17, "offset": 316 }
          }
        },
        "severity": "ERROR",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/vulpy.py",
      "start": { "col": 1, "line": 17, "offset": 316 }
    },
    {
      "check_id": "python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
      "end": { "col": 72, "line": 53, "offset": 1393 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "d71ca17099c52d8c01ad4d27242ab7f94a1959e1501b532f73f15c46080f24a71902e81b2a6f77ea1ef1249a361d331a3cc24533858ed32d353c46a064cca472_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', port=5001, extra_files='csp.txt')",
        "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function",
        "metadata": {
          "category": "security",
          "confidence": "MEDIUM",
          "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "LOW",
          "owasp": ["A01:2021 - Broken Access Control"],
          "references": [
            "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9533,
              "rule_id": "8GUjdX",
              "rv_id": 110249,
              "url": "https://semgrep.dev/playground/r/o5Tglnv/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "version_id": "o5Tglnv"
            }
          },
          "shortlink": "https://sg.run/vz5b",
          "source": "https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Other"]
        },
        "metavars": {},
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/vulpy.py",
      "start": { "col": 1, "line": 53, "offset": 1322 }
    },
    {
      "check_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "end": { "col": 72, "line": 53, "offset": 1393 },
      "extra": {
        "engine_kind": "OSS",
        "fingerprint": "22ef23b18cbd87a7db04fe87b7c35d62a0292a3bc8952648045f429411b6425fc5363992acbfa739d5b44ac4fa5f7419a313dba0f3624aac1c180f2c79d8ba8c_0",
        "is_ignored": false,
        "lines": "app.run(debug=True, host='127.0.1.1', port=5001, extra_files='csp.txt')",
        "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
        "metadata": {
          "category": "security",
          "confidence": "HIGH",
          "cwe": ["CWE-489: Active Debug Code"],
          "impact": "MEDIUM",
          "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
          "likelihood": "HIGH",
          "owasp": "A06:2017 - Security Misconfiguration",
          "references": [
            "https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"
          ],
          "semgrep.dev": {
            "rule": {
              "origin": "community",
              "r_id": 9534,
              "rule_id": "gxU1bd",
              "rv_id": 110250,
              "url": "https://semgrep.dev/playground/r/zyTK85o/python.flask.security.audit.debug-enabled.debug-enabled",
              "version_id": "zyTK85o"
            }
          },
          "shortlink": "https://sg.run/dKrd",
          "source": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
          "subcategory": ["vuln"],
          "technology": ["flask"],
          "vulnerability_class": ["Active Debug Code"]
        },
        "metavars": {
          "$APP": {
            "abstract_content": "app",
            "end": { "col": 4, "line": 53, "offset": 1325 },
            "propagated_value": {
              "svalue_abstract_content": "Flask('vulpy')",
              "svalue_end": { "col": 21, "line": 16, "offset": 315 },
              "svalue_start": { "col": 7, "line": 16, "offset": 301 }
            },
            "start": { "col": 1, "line": 53, "offset": 1322 }
          }
        },
        "severity": "WARNING",
        "validation_state": "NO_VALIDATOR"
      },
      "path": "good/vulpy.py",
      "start": { "col": 1, "line": 53, "offset": 1322 }
    }
  ],
  "skipped_rules": [],
  "version": "1.73.0"
}
