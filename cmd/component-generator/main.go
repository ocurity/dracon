package main

import (
	"bytes"
	"flag"
	"log"
	"os"
	"path/filepath"

	wordwrap "github.com/mitchellh/go-wordwrap"
	"github.com/ocurity/dracon/pkg/components/generator/patches"
	kustomizeV1Alpha1 "github.com/ocurity/dracon/pkg/types/kustomize.config.k8s.io/v1alpha1"
	tektonV1Beta1 "github.com/ocurity/dracon/pkg/types/tekton.dev/v1beta1"
	"gopkg.in/yaml.v3"
)

func main() {
	taskPath := flag.String("task", "", "path to the task YAML file. defaults to kustomization.yaml in the same directory as the task")
	outFile := flag.String("out", "", "path where the output will be stored")
	flag.Parse()

	if *outFile == "" {
		directory := filepath.Dir(*taskPath)
		*outFile = filepath.Join(directory, "kustomization.yaml")
	}

	taskBytes, err := os.ReadFile(*taskPath)
	if err != nil {
		log.Fatalf("could not read file %s: %v", *taskPath, err)
	}

	task := &tektonV1Beta1.Task{}
	if err := yaml.Unmarshal(taskBytes, task); err != nil {
		log.Fatalf("could not unmarshal contents of file %s: %v", *taskPath, err)
	}

	component, ok := task.Metadata.Labels["v1.dracon.ocurity.com/component"]
	if !ok {
		log.Fatalf("Task %s is missing .metadata.labels[\"v1.dracon.ocurity.com/component\"]", task.Metadata.Name)
	}

	switch component {
	case "base":
	case "source":
	case "producer":
	case "consumer":
	case "enricher":
		break
	default:
		log.Fatalf("unrecognised component: %s", component)
	}

	for _, step := range task.Spec.Steps {
		if step.Env == nil {
			log.Fatalf("step %s of Task %s should have an empty list as env instead of nil", step.Name, task.Metadata.Name)
		}
	}

	kustomizeComponent := kustomizeV1Alpha1.NewComponent()
	kustomizeComponent.Resources = []string{"task.yaml"}

	for _, generator := range []patches.Generator{
		patches.AddTaskToPipeline,
		// this was commented out already
		// patches.AddProducerDependencyOnBase,
		patches.AddProducerDependencyOnSource,
		patches.AddProducerAggregatorAnchor,
		patches.AddEnricherDependencyOnProducerAggregator,
		patches.AddEnricherAggregatorAnchor,
		patches.AddConsumerDependencyOnEnricherAggregator,
		patches.AddScanUUIDAndStartTimeToTask,
		patches.AddScanUUIDAndStartTimeToPipeline,
	} {
		if newPatches, err := generator(task); err != nil {
			log.Fatalf("could not generate kustomize patches for Task %s: %v", task.Metadata.Name, err)
		} else {
			kustomizeComponent.Patches = append(kustomizeComponent.Patches, newPatches...)
		}
	}

	yamlBytes, err := yaml.Marshal(kustomizeComponent)
	if err != nil {
		log.Fatalf("could not marshal kustmoize YAML: %v", err)
	}

	// add Head Comment
	yamlNode := &yaml.Node{}
	if err := yaml.Unmarshal(yamlBytes, yamlNode); err != nil {
		log.Fatalf("could not unmarshal geneated kustmoize YAML: %v", err)
	}

	yamlNode.HeadComment = wordwrap.WrapString(
		"DO NOT EDIT. Code generated by: github.com/ocurity/dracon/bin/kustomize-component-generator.\n",
		80,
	)

	buf := &bytes.Buffer{}
	yamlEncoder := yaml.NewEncoder(buf)
	yamlEncoder.SetIndent(2)
	if err := yamlEncoder.Encode(yamlNode); err != nil {
		log.Fatalf("could not marshal generated kustmoize YAML: %v", err)
	}

	if err := os.WriteFile(*outFile, buf.Bytes(), 0o600); err != nil {
		log.Fatalf("could not write kustmoize YAML to file %s: %v", *outFile, err)
	}
}
