"""
"""
subinclude(
    "///k8s//build/defs:k8s",
    "///k8s//build/defs:helm",
)

def dracon_component(
    name: str,
    task: str,
    images: list = [],
    visibility: list = [],
):
    kustomization=genrule(
        name = f"_{name}#kustomization",
        srcs = {
            "task": [task],
        },
        outs = ["kustomization.yaml"],
        cmd = """
        $TOOLS \\
            --task "$SRCS_TASK" \\
            --out "$OUTS"
        """,
        labels = ["codegen"],
        tools = [CONFIG.KUSTOMIZE_COMPONENT_GENERATOR],
    )

    kustomized_config(
        name = "k8s",
        srcs = [
            kustomization,
            task,
        ],
        images = images,
        visibility = ["//examples/pipelines/..."],
    )

def dracon_pipeline(
    name: str,
    kustomization_yaml: str,
    pipelinerun: str,
    kube_context: str,
    components: list = [],
):
    pkg_name=basename(package_name())
    if name != pkg_name:
        fail(f"""dracon_pipeline name must be the same as the directory name.
Got '{name}', expected '{pkg_name}'.
""")
    pipeline=kustomized_config(
        name = name,
        srcs = [kustomization_yaml],
        labels = ["pipeline"],
        deps = components,
    )

    chart=helm_chart(
        name = tag(name, "chart"),
        src_templates = [pipeline],
    )

    helm_release(
        name = name,
        release_name = name,
        namespace = "dracon",
        kube_context = kube_context,
        src_chart = chart,
    )

    pipelinerun_config=k8s_config(
        name = tag(name, "pipelinerun"),
        srcs = [pipelinerun],
        create_only = True,
    )

    k8s_deploy(
        name = f"{name}_pipelinerun",
        srcs = [pipelinerun_config],
        kube_context = kube_context,
    )
