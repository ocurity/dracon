apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  creationTimestamp: null
  name: dracon-nancy-purl-project
spec:
  params:
  - default: ""
    name: base-scan-tags
    type: string
  - description: Repository URL to clone from.
    name: source-dependency-purl
    type: string
  - default: docker.io/golang:1.21
    description: The container image that will be used to run Go nancy
    name: producer-golang-nancy-goImage
    type: string
  - default: ""
    description: An optional key to sign each aggregated result with
    name: enricher-aggregator-b64-signature-key
    type: string
  - default: mongodb://consumer-mongodb:consumer-mongodb@consumer-mongodb:27017/consumer-mongodb
    name: consumer-mongodb-db-uri
    type: string
  - default: consumer-mongodb
    name: consumer-mongodb-db-name
    type: string
  - default: consumer-mongodb
    name: consumer-mongodb-collection-name
    type: string
  tasks:
  - name: base
    params:
    - name: base-scan-tags
      value: $(params.base-scan-tags)
    taskRef:
      name: base
  - name: source-dependency
    params:
    - name: source-dependency-purl
      value: $(params.source-dependency-purl)
    taskRef:
      name: source-dependency
    workspaces:
    - name: output
      workspace: output
  - name: producer-golang-nancy
    params:
    - name: producer-golang-nancy-goImage
      value: $(params.producer-golang-nancy-goImage)
    - name: anchors
      value:
      - $(tasks.source-dependency.results.anchor)
    - name: dracon_scan_id
      value: $(tasks.base.results.dracon-scan-id)
    - name: dracon_scan_start_time
      value: $(tasks.base.results.dracon-scan-start-time)
    - name: dracon_scan_tags
      value: $(tasks.base.results.dracon-scan-tags)
    taskRef:
      name: producer-golang-nancy
    workspaces:
    - name: output
      workspace: output
  - name: producer-aggregator
    params:
    - name: anchors
      value:
      - $(tasks.producer-golang-nancy.results.anchor)
    taskRef:
      name: producer-aggregator
    workspaces:
    - name: output
      workspace: output
  - name: enricher-deduplication
    params:
    - name: anchors
      value:
      - $(tasks.producer-aggregator.results.anchor)
    taskRef:
      name: enricher-deduplication
    workspaces:
    - name: output
      workspace: output
  - name: enricher-aggregator
    params:
    - name: enricher-aggregator-b64-signature-key
      value: $(params.enricher-aggregator-b64-signature-key)
    - name: anchors
      value:
      - $(tasks.enricher-deduplication.results.anchor)
    taskRef:
      name: enricher-aggregator
    workspaces:
    - name: output
      workspace: output
  - name: consumer-mongodb
    params:
    - name: consumer-mongodb-db-uri
      value: $(params.consumer-mongodb-db-uri)
    - name: consumer-mongodb-db-name
      value: $(params.consumer-mongodb-db-name)
    - name: consumer-mongodb-collection-name
      value: $(params.consumer-mongodb-collection-name)
    - name: anchors
      value:
      - $(tasks.enricher-aggregator.results.anchor)
    taskRef:
      name: consumer-mongodb
    workspaces:
    - name: output
      workspace: output
  workspaces:
  - name: output
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  labels:
    v1.dracon.ocurity.com/component: base
  name: base
spec:
  params:
  - default: ""
    name: base-scan-tags
    type: string
  results:
  - description: The scan start time
    name: dracon-scan-start-time
  - description: The scan unique id
    name: dracon-scan-id
  - description: serialized map[string]string of tags for this scan
    name: dracon-scan-tags
  steps:
  - image: docker.io/busybox:1.35.0
    name: generate-scan-id-start-time
    resources: {}
    script: |
      cat /proc/sys/kernel/random/uuid | tee $(results.dracon-scan-id.path)
      date +"%Y-%m-%dT%H:%M:%SZ" | tee $(results.dracon-scan-start-time.path)
      echo "$(params.base-scan-tags)" | tee $(results.dracon-scan-tags.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.29.0
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le,linux/arm64
  creationTimestamp: null
  labels:
    app.kubernetes.io/version: "0.6"
    v1.dracon.ocurity.com/component: source
  name: source-dependency
spec:
  description: This source component accepts a purl argument belonging to one of the
    supported types and generates a dependency file relevant to the type.
  params:
  - description: Repository URL to clone from.
    name: source-dependency-purl
    type: string
  results:
  - description: An anchor to allow other tasks to depend on this task.
    name: anchor
  steps:
  - args:
    - -purl
    - $(params.source-dependency-purl)
    - -outDir
    - $(workspaces.output.path)
    command:
    - /app/components/sources/dependency/dependency
    image: '{{ default "ghcr.io/ocurity/dracon" .Values.container_registry }}/components/sources/dependency:{{
      default "latest" .Values.dracon_os_component_version }}'
    name: generate-package
    resources: {}
  - image: docker.io/busybox
    name: anchor
    resources: {}
    script: echo "$(context.task.name)" > "$(results.anchor.path)"
  workspaces:
  - description: The generated file will be stored onto the volume backing this Workspace.
    name: output
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  labels:
    v1.dracon.ocurity.com/component: producer
  name: producer-golang-nancy
spec:
  params:
  - default: docker.io/golang:1.21
    description: The container image that will be used to run Go nancy
    name: producer-golang-nancy-goImage
    type: string
  - default: null
    description: A list of tasks that this task depends on
    name: anchors
    type: array
  - name: dracon_scan_id
    type: string
  - name: dracon_scan_start_time
    type: string
  - name: dracon_scan_tags
    type: string
  results:
  - description: An anchor to allow other tasks to depend on this task.
    name: anchor
  steps:
  - env:
    - name: DRACON_SCAN_TIME
      value: $(params.dracon_scan_start_time)
    - name: DRACON_SCAN_ID
      value: $(params.dracon_scan_id)
    - name: DRACON_SCAN_TAGS
      value: $(params.dracon_scan_tags)
    image: $(params.producer-golang-nancy-goImage)
    name: go-deps
    resources: {}
    script: |
      #!/bin/bash -xe
      # make sure that the git repo is considered secure since it's mounted with onwen None but the process itself runs as root
      git config --global --add safe.directory $(workspaces.output.path)/source-code
      if [[ ! -f "$(workspaces.output.path)/source-code/Gopkg.lock" ]]; then
         go_mod_paths=$(find $(workspaces.output.path)/source-code -iname "go.mod")
         touch /scratch/golist.json
         for go_mod_path in $go_mod_paths; do
           cd $(dirname $go_mod_path) && go list -json -deps ./... >> /scratch/golist.json
         done
         cat /scratch/golist.json
       else
         cat $(workspaces.output.path)/source-code/Gopkg.lock
       fi
       ls -lah /scratch
    volumeMounts:
    - mountPath: /scratch
      name: scratch
  - env:
    - name: DRACON_SCAN_TIME
      value: $(params.dracon_scan_start_time)
    - name: DRACON_SCAN_ID
      value: $(params.dracon_scan_id)
    - name: DRACON_SCAN_TAGS
      value: $(params.dracon_scan_tags)
    image: docker.io/sonatypecommunity/nancy:v1.0.42-alpine
    imagePullPolicy: IfNotPresent
    name: run-nancy
    resources: {}
    script: |
      #!/bin/sh
      if [[ ! -f "$(workspaces.output.path)/source-code/Gopkg.lock" ]]; then
        echo "Running nancy with golist"
        cat /scratch/golist.json | nancy sleuth -o json > /scratch/out.json || true
      else
        echo "Running nancy in dep mode"
        nancy sleuth -p "$(workspaces.output.path)/source-code/Gopkg.lock" -o json > /scratch/out.json || true
      fi
      cat /scratch/out.json
    volumeMounts:
    - mountPath: /scratch
      name: scratch
  - args:
    - -in=/scratch/out.json
    - -out=$(workspaces.output.path)/.dracon/producers/golang-nancy.pb
    command:
    - /app/components/producers/golang-nancy/golang-nancy-parser
    env:
    - name: DRACON_SCAN_TIME
      value: $(params.dracon_scan_start_time)
    - name: DRACON_SCAN_ID
      value: $(params.dracon_scan_id)
    - name: DRACON_SCAN_TAGS
      value: $(params.dracon_scan_tags)
    image: '{{ default "ghcr.io/ocurity/dracon" .Values.container_registry }}/components/producers/golang-nancy:{{
      default "latest" .Values.dracon_os_component_version }}'
    imagePullPolicy: IfNotPresent
    name: produce-issues
    resources: {}
    volumeMounts:
    - mountPath: /scratch
      name: scratch
  - env:
    - name: DRACON_SCAN_TIME
      value: $(params.dracon_scan_start_time)
    - name: DRACON_SCAN_ID
      value: $(params.dracon_scan_id)
    - name: DRACON_SCAN_TAGS
      value: $(params.dracon_scan_tags)
    image: docker.io/busybox
    name: anchor
    resources: {}
    script: echo "$(context.task.name)" > "$(results.anchor.path)"
  volumes:
  - emptyDir: {}
    name: scratch
  workspaces:
  - description: The workspace containing the source-code to scan.
    name: output
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  labels:
    v1.dracon.ocurity.com/component: producer-aggregator
  name: producer-aggregator
spec:
  params:
  - default: null
    description: A list of tasks that this task depends on
    name: anchors
    type: array
  results:
  - description: An anchor to allow other tasks to depend on this task.
    name: anchor
  steps:
  - args:
    - $(workspaces.output.path)
    command:
    - ls
    image: docker.io/busybox
    name: aggregate
    resources: {}
  - command:
    - /app/components/producers/aggregator/tagger
    env:
    - name: READ_PATH
      value: $(workspaces.output.path)/.dracon/producers
    - name: WRITE_PATH
      value: $(workspaces.output.path)/.dracon/producers
    image: '{{ default "ghcr.io/ocurity/dracon" .Values.container_registry }}/components/producers/tagger:{{
      default "latest" .Values.dracon_os_component_version }}'
    name: tag
    resources: {}
  - image: docker.io/busybox
    name: anchor
    resources: {}
    script: echo "$(context.task.name)" > "$(results.anchor.path)"
  workspaces:
  - description: The workspace containing the source-code to scan.
    name: output
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  labels:
    v1.dracon.ocurity.com/component: enricher
  name: enricher-deduplication
spec:
  params:
  - default: null
    description: A list of tasks that this task depends on
    name: anchors
    type: array
  results:
  - description: An anchor to allow other tasks to depend on this task.
    name: anchor
  steps:
  - command:
    - /app/components/enrichers/deduplication/deduplication
    env:
    - name: ENRICHER_READ_PATH
      value: $(workspaces.output.path)/.dracon/producers
    - name: ENRICHER_WRITE_PATH
      value: $(workspaces.output.path)/.dracon/enrichers/deduplication
    - name: ENRICHER_DB_CONNECTION
      value: postgresql://dracon:dracon@dracon-enrichment-db.$(context.taskRun.namespace).svc?sslmode=disable
    image: '{{ default "ghcr.io/ocurity/dracon" .Values.container_registry }}/components/enrichers/deduplication:{{
      default "latest" .Values.dracon_os_component_version }}'
    imagePullPolicy: IfNotPresent
    name: run-enricher
    resources: {}
  - image: docker.io/busybox
    name: anchor
    resources: {}
    script: echo "$(context.task.name)" > "$(results.anchor.path)"
  workspaces:
  - description: The workspace containing the source-code to scan.
    name: output
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  labels:
    v1.dracon.ocurity.com/component: enricher-aggregator
  name: enricher-aggregator
spec:
  params:
  - default: ""
    description: An optional key to sign each aggregated result with
    name: enricher-aggregator-b64-signature-key
    type: string
  - default: null
    description: A list of tasks that this task depends on
    name: anchors
    type: array
  results:
  - description: An anchor to allow other tasks to depend on this task.
    name: anchor
  steps:
  - args:
    - $(workspaces.output.path)
    command:
    - ls
    - -lah
    image: docker.io/busybox:1.35.0
    name: aggregate
    resources: {}
  - command:
    - /app/components/enrichers/aggregator/aggregator
    env:
    - name: READ_PATH
      value: $(workspaces.output.path)/.dracon/enrichers
    - name: WRITE_PATH
      value: $(workspaces.output.path)/.dracon/enrichers
    - name: B64_SIGNATURE_KEY
      value: $(params.enricher-aggregator-b64-signature-key)
    image: '{{ default "ghcr.io/ocurity/dracon" .Values.container_registry }}/components/enrichers/aggregator:{{
      default "latest" .Values.dracon_os_component_version }}'
    name: aggregate-tagged-issues
    resources: {}
  - image: docker.io/busybox
    name: anchor
    resources: {}
    script: echo "$(context.task.name)" > "$(results.anchor.path)"
  workspaces:
  - description: The workspace containing the source-code to scan.
    name: output
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  labels:
    v1.dracon.ocurity.com/component: consumer
  name: consumer-mongodb
spec:
  params:
  - default: mongodb://consumer-mongodb:consumer-mongodb@consumer-mongodb:27017/consumer-mongodb
    name: consumer-mongodb-db-uri
    type: string
  - default: consumer-mongodb
    name: consumer-mongodb-db-name
    type: string
  - default: consumer-mongodb
    name: consumer-mongodb-collection-name
    type: string
  - default: null
    description: A list of tasks that this task depends on
    name: anchors
    type: array
  steps:
  - args:
    - -in
    - $(workspaces.output.path)/.dracon/enrichers/
    - -db-uri
    - $(params.consumer-mongodb-db-uri)
    - -db-name
    - $(params.consumer-mongodb-db-name)
    - -collection-name
    - $(params.consumer-mongodb-collection-name)
    command:
    - /app/components/consumers/mongodb/mongodb
    image: '{{ default "ghcr.io/ocurity/dracon" .Values.container_registry }}/components/consumers/mongodb:{{
      default "latest" .Values.dracon_os_component_version }}'
    imagePullPolicy: IfNotPresent
    name: run-consumer
    resources: {}
  workspaces:
  - description: The workspace containing the source-code to scan.
    name: output
